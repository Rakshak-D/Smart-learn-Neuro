
=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\accessibility\migrations\0001_initial.py ===

# Generated by Django 5.2.1 on 2025-05-17 08:02

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AccessibilitySettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("use_dyslexia_font", models.BooleanField(default=False)),
            ],
        ),
    ]

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\accessibility\migrations\0002_initial.py ===

# Generated by Django 5.2.1 on 2025-05-17 08:02

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("accessibility", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="accessibilitysettings",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
    ]

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\accessibility\migrations\__init__.py ===


=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\accessibility\admin.py ===

from django.contrib import admin
from .models import AccessibilitySettings

# Register AccessibilitySettings model to Django admin
admin.site.register(AccessibilitySettings)

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\accessibility\apps.py ===

from django.apps import AppConfig


class AccessibilityConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accessibility'

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\accessibility\middleware.py ===

from django.conf import settings
from .models import AccessibilitySettings

class AccessibilityMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        response = self.get_response(request)
        return response

    def process_template_response(self, request, response):
        if hasattr(response, 'context_data') and response.context_data is not None:
            if request.user.is_authenticated:
                settings, _ = AccessibilitySettings.objects.get_or_create(user=request.user)
                response.context_data['font_size'] = request.user.font_size  # Ensure font_size is from CustomUser
            else:
                response.context_data['font_size'] = 16  # Default font size for unauthenticated users
        return response

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\accessibility\models.py ===

from django.db import models
from django.conf import settings

class AccessibilitySettings(models.Model):
    # One-to-one relation to the User model
    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    
    # Whether to use a dyslexia-friendly font
    use_dyslexia_font = models.BooleanField(default=False)

    def __str__(self):
        return f"Settings for {self.user.username}"

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\accessibility\tests.py ===

from django.test import TestCase
from django.contrib.auth import get_user_model
from .models import AccessibilitySettings

class AccessibilitySettingsTests(TestCase):
    def setUp(self):
        self.user = get_user_model().objects.create_user(username='testuser', password='testpass')

    def test_create_accessibility_settings(self):
        settings = AccessibilitySettings.objects.create(user=self.user, use_dyslexia_font=True)
        self.assertTrue(settings.use_dyslexia_font)
        self.assertEqual(str(settings), f"Settings for {self.user.username}")

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\accessibility\urls.py ===

from django.urls import path
from . import views

urlpatterns = [
    # URL route for accessibility settings page
    path('settings/', views.accessibility_settings, name='accessibility_settings'),
]

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\accessibility\views.py ===

from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from .models import AccessibilitySettings

@login_required
def accessibility_settings(request):
    # Get or create the AccessibilitySettings instance for the logged-in user
    settings, created = AccessibilitySettings.objects.get_or_create(user=request.user)
    
    if request.method == 'POST':
        # Update use_dyslexia_font based on form submission checkbox
        settings.use_dyslexia_font = 'use_dyslexia_font' in request.POST
        settings.save()
        # Redirect to user profile after saving
        return redirect('profile')
    
    # Render the settings form with current settings
    return render(request, 'accessibility/settings.html', {'accessibility_settings': settings})

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\accessibility\__init__.py ===


=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\ai\gesture\models.py ===

from django.db import models

class Gesture(models.Model):
    user_id = models.IntegerField()
    gesture_type = models.CharField(max_length=100)
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Gesture {self.gesture_type} by user {self.user_id}"

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\ai\gesture\services.py ===

import cv2
import mediapipe as mp
import numpy as np

mp_hands = mp.solutions.hands
hands = mp_hands.Hands(max_num_hands=1, min_detection_confidence=0.7)

def process_gesture(video_frame):
    """
    Process a video frame to detect hand gestures using MediaPipe.
    Returns gesture type (e.g., 'swipe_left', 'swipe_right', 'none').
    """
    try:
        # Convert frame to RGB
        frame_rgb = cv2.cvtColor(video_frame, cv2.COLOR_BGR2RGB)
        results = hands.process(frame_rgb)

        if results.multi_hand_landmarks:
            for hand_landmarks in results.multi_hand_landmarks:
                # Get x-coordinate of wrist (landmark 0)
                wrist_x = hand_landmarks.landmark[0].x
                # Simple heuristic: detect swipe based on wrist position
                if wrist_x < 0.3:
                    return "swipe_right"
                elif wrist_x > 0.7:
                    return "swipe_left"
        return "none"
    except Exception as e:
        print(f"Gesture processing error: {e}")
        return "none"

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\ai\gesture\views.py ===

from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from .services import process_gesture
import numpy as np

@csrf_exempt
def process_gesture_view(request):
    if request.method == 'POST':
        try:
            data = request.json()
            frame_data = np.array(data['frame'], dtype=np.uint8)
            # Reshape frame (assuming 4 channels: RGBA)
            height, width = 480, 640  # Adjust based on client
            frame = frame_data.reshape((height, width, 4))
            gesture = process_gesture(frame)
            return JsonResponse({'gesture': gesture})
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=400)
    return JsonResponse({'error': 'Invalid method'}, status=405)

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\ai\gesture\__init__.py ===


=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\ai\migrations\0001_initial.py ===

# Generated by Django 5.2.1 on 2025-05-17 08:02

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Recommendation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("user_id", models.IntegerField()),
                ("lesson_id", models.IntegerField()),
                ("score", models.FloatField()),
            ],
        ),
    ]

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\ai\migrations\__init__.py ===


=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\ai\recommendation\models.py ===

from django.db import models

class Recommendation(models.Model):
    user_id = models.IntegerField()
    lesson_id = models.IntegerField()
    score = models.FloatField()

    def __str__(self):
        return f"Recommendation for user {self.user_id}"

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\ai\recommendation\recommendation.py ===

import tensorflow as tf
import numpy as np
from django.db.models import Avg
from lessons.models import LessonProgress, Lesson

def recommend_lessons(user_id, lesson_data):
    """
    Recommend lessons based on user progress and preferences.
    Uses a simple collaborative filtering approach.
    """
    try:
        # Fetch user progress
        progress = LessonProgress.objects.filter(user_id=user_id).values('lesson_id', 'progress')
        completed_lessons = {p['lesson_id'] for p in progress if p['progress'] >= 80}

        # Simple scoring: prioritize uncompleted lessons with high average progress
        scores = []
        for lesson in lesson_data:
            lesson_id = lesson['id']
            if lesson_id not in completed_lessons:
                avg_progress = LessonProgress.objects.filter(lesson_id=lesson_id).aggregate(avg_progress=Avg('progress'))['avg_progress'] or 0
                scores.append((lesson, avg_progress))
        
        # Sort by score and return top 3
        scores.sort(key=lambda x: x[1], reverse=True)
        return [lesson for lesson, _ in scores[:3]]
    except Exception as e:
        print(f"Recommendation error: {e}")
        return []  # Fallback to empty list

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\ai\recommendation\__init__.py ===


=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\ai\summarization\utils.py ===

import spacy

try:
    nlp = spacy.load('en_core_web_sm')
except OSError:
    from spacy.cli import download
    download('en_core_web_sm')
    nlp = spacy.load('en_core_web_sm')

def summarize_text(text):
    doc = nlp(text)
    sentences = [sent.text for sent in doc.sents]
    return ' '.join(sentences[:2])

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\ai\summarization\__init__.py ===


=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\ai\translation\adapters.py ===

from googletrans import Translator

def translate_text(text, target_lang='es'):
    """
    Translate text to the target language using googletrans.
    """
    try:
        translator = Translator()
        result = translator.translate(text, dest=target_lang)
        return result.text
    except Exception as e:
        print(f"Translation error: {e}")
        return text  # Fallback to original text

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\ai\translation\__init__.py ===


=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\ai\admin.py ===

from django.contrib import admin
from .recommendation.models import Recommendation

admin.site.register(Recommendation)

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\ai\apps.py ===

from django.apps import AppConfig


class AiConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'ai'

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\ai\models.py ===

from django.db import models

# Create your models here.

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\ai\tests.py ===

from django.test import TestCase

# Create your tests here.

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\ai\urls.py ===

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import RecommendationView, process_gesture_view

router = DefaultRouter()
router.register(r'recommend', RecommendationView)

urlpatterns = [
    path('recommend/', RecommendationView.as_view(), name='recommend'),
    path('gesture/process/', process_gesture_view, name='gesture_process'),
    path('api/', include(router.urls)),
]

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\ai\views.py ===

from django.shortcuts import render
from rest_framework.views import APIView
from rest_framework.response import Response
from .recommendation.recommendation import recommend_lessons
from lessons.models import Lesson

class RecommendationView(APIView):
    def get(self, request):
        if not request.user.is_authenticated:
            return Response({'error': 'Authentication required'}, status=401)
        user_id = request.user.id
        lessons = [{'id': l.id, 'title': l.title} for l in Lesson.objects.all()]
        recommended = recommend_lessons(user_id, lessons)
        return Response(recommended)

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\ai\__init__.py ===


=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\assessments\migrations\0001_initial.py ===

# Generated by Django 5.2.1 on 2025-05-17 08:02

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Assessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                (
                    "audio_file",
                    models.FileField(blank=True, null=True, upload_to="audio/"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Response",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("response_text", models.TextField()),
                (
                    "assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assessments.assessment",
                    ),
                ),
            ],
        ),
    ]

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\assessments\migrations\0002_initial.py ===

# Generated by Django 5.2.1 on 2025-05-17 08:02

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("assessments", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="response",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
    ]

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\assessments\migrations\__init__.py ===


=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\assessments\admin.py ===

from django.contrib import admin
from .models import Assessment, Response

# Register Assessment and Response models with the Django admin site
admin.site.register(Assessment)
admin.site.register(Response)

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\assessments\apps.py ===

from django.apps import AppConfig


class AssessmentsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'assessments'

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\assessments\models.py ===

from django.db import models
from django.conf import settings

class Assessment(models.Model):
    """
    Model representing an assessment with an optional audio file.
    """
    title = models.CharField(max_length=200)
    audio_file = models.FileField(upload_to='audio/', null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

class Response(models.Model):
    """
    Model representing a user's response to an assessment.
    """
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    assessment = models.ForeignKey(Assessment, on_delete=models.CASCADE)
    response_text = models.TextField()

    def __str__(self):
        return f"{self.user.username} - {self.assessment.title}"

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\assessments\serializers.py ===

from rest_framework import serializers
from .models import Assessment, Response

class AssessmentSerializer(serializers.ModelSerializer):
    """
    Serializer for the Assessment model.
    Serializes the id, title, and audio_file fields.
    """
    class Meta:
        model = Assessment
        fields = ('id', 'title', 'audio_file')

class ResponseSerializer(serializers.ModelSerializer):
    """
    Serializer for the Response model.
    Serializes the id, user, assessment, and response_text fields.
    """
    class Meta:
        model = Response
        fields = ('id', 'user', 'assessment', 'response_text')

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\assessments\tests.py ===

from django.test import TestCase
from django.contrib.auth import get_user_model
from .models import Assessment, Response

class AssessmentTests(TestCase):
    def setUp(self):
        self.user = get_user_model().objects.create_user(username='testuser', password='testpass')
        self.assessment = Assessment.objects.create(title='Test Assessment')

    def test_create_response(self):
        response = Response.objects.create(
            user=self.user, assessment=self.assessment, response_text='Test response'
        )
        self.assertEqual(response.response_text, 'Test response')
        self.assertEqual(str(response), f"{self.user.username} - {self.assessment.title}")

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\assessments\urls.py ===

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from . import views

# Router for REST API endpoints
router = DefaultRouter()
router.register(r'assessments', views.AssessmentViewSet)
router.register(r'responses', views.ResponseViewSet)

urlpatterns = [
    # URL for list of assessments
    path('', views.assessment_list, name='assessment_list'),

    # URL for assessment detail - corrected path converter syntax
    path('<int:pk>/', views.assessment_detail, name='assessment_detail'),

    # URL for assessment results
    path('<int:pk>/results/', views.assessment_results, name='assessment_results'),

    # Include API routes
    path('api/', include(router.urls)),
]

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\assessments\views.py ===

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from rest_framework import viewsets
from .models import Assessment, Response
from .serializers import AssessmentSerializer, ResponseSerializer

@login_required
def assessment_list(request):
    """
    View to display all assessments.
    """
    assessments = Assessment.objects.all()
    return render(request, 'assessments/assessment_list.html', {'assessments': assessments})

@login_required
def assessment_detail(request, pk):
    """
    View to display a single assessment and handle response submission.
    """
    assessment = get_object_or_404(Assessment, pk=pk)
    
    if request.method == 'POST':
        response_text = request.POST.get('response_text')
        # Create a new Response object linked to the current user and assessment
        Response.objects.create(user=request.user, assessment=assessment, response_text=response_text)
        return redirect('assessment_results', pk=assessment.pk)
    
    return render(request, 'assessments/assessment_detail.html', {'assessment': assessment})

@login_required
def assessment_results(request, pk):
    """
    View to display all responses by the current user for a specific assessment.
    """
    assessment = get_object_or_404(Assessment, pk=pk)
    responses = Response.objects.filter(user=request.user, assessment=assessment)
    return render(request, 'assessments/assessment_results.html', {'assessment': assessment, 'responses': responses})

class AssessmentViewSet(viewsets.ModelViewSet):
    """
    API endpoint for CRUD operations on assessments.
    """
    queryset = Assessment.objects.all()
    serializer_class = AssessmentSerializer

class ResponseViewSet(viewsets.ModelViewSet):
    """
    API endpoint for CRUD operations on responses.
    """
    queryset = Response.objects.all()
    serializer_class = ResponseSerializer

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\assessments\__init__.py ===


=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\core\migrations\__init__.py ===


=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\core\admin.py ===

from django.contrib import admin

# Register your models here.

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\core\apps.py ===

from django.apps import AppConfig


class CoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core'

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\core\context_proccesors.py ===

from accessibility.models import AccessibilitySettings

def user_settings(request):
    if request.user.is_authenticated:
        settings, created = AccessibilitySettings.objects.get_or_create(user=request.user)
        return {'accessibility_settings': settings}
    return {'accessibility_settings': None}

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\core\models.py ===

from django.db import models

# Create your models here.

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\core\tests.py ===

from django.test import TestCase

# Create your tests here.

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\core\views.py ===

from django.shortcuts import render

# Create your views here.

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\core\__init__.py ===


=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\lessons\migrations\0001_initial.py ===

# Generated by Django 5.2.1 on 2025-05-17 08:02

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Lesson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                (
                    "image",
                    models.ImageField(blank=True, null=True, upload_to="images/"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="LessonProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("progress", models.FloatField(default=0.0)),
                (
                    "lesson",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lessons.lesson"
                    ),
                ),
            ],
        ),
    ]

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\lessons\migrations\0002_initial.py ===

# Generated by Django 5.2.1 on 2025-05-17 08:02

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("lessons", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="lessonprogress",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
    ]

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\lessons\migrations\__init__.py ===


=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\lessons\admin.py ===

from django.contrib import admin
from .models import Lesson, LessonProgress

# Register the Lesson model with the Django admin site
admin.site.register(Lesson)

# Register the LessonProgress model with the Django admin site
admin.site.register(LessonProgress)

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\lessons\apps.py ===

from django.apps import AppConfig


class LessonsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'lessons'

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\lessons\models.py ===

from django.db import models
from django.conf import settings

class Lesson(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField()
    image = models.ImageField(upload_to='images/', null=True, blank=True)
    audio_file = models.FileField(upload_to='audio/', null=True, blank=True)  # Optional lesson audio
    created_at = models.DateTimeField(auto_now_add=True)

    def get_chunks(self, user):
        """
        Return lesson content as chunks if the user prefers chunked reading,
        otherwise return full content.
        """
        if hasattr(user, 'prefers_chunked') and user.prefers_chunked:
            return self.content.split('\n')
        return [self.content]

    def __str__(self):
        return self.title


class LessonProgress(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE)
    progress = models.FloatField(default=0.0)  # Progress as percentage (0 to 100)

    def __str__(self):
        return f"{self.user.username} - {self.lesson.title} ({self.progress}%)"

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\lessons\serializers.py ===

from rest_framework import serializers
from .models import Lesson, LessonProgress

class LessonSerializer(serializers.ModelSerializer):
    """
    Serializer for the Lesson model.
    Serializes fields: id, title, content, image, audio_file.
    """
    class Meta:
        model = Lesson
        fields = ('id', 'title', 'content', 'image', 'audio_file')

class LessonProgressSerializer(serializers.ModelSerializer):
    """
    Serializer for the LessonProgress model.
    Serializes fields: id, user, lesson, progress.
    """
    class Meta:
        model = LessonProgress
        fields = ('id', 'user', 'lesson', 'progress')

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\lessons\tests.py ===

from django.test import TestCase
from django.contrib.auth import get_user_model
from .models import Lesson, LessonProgress

class LessonTests(TestCase):
    def setUp(self):
        self.user = get_user_model().objects.create_user(
            username='testuser', password='testpass', prefers_chunked=True
        )
        self.lesson = Lesson.objects.create(title='Test Lesson', content='Line1\nLine2')

    def test_get_chunks(self):
        chunks = self.lesson.get_chunks(self.user)
        self.assertEqual(chunks, ['Line1', 'Line2'])

    def test_lesson_progress(self):
        progress = LessonProgress.objects.create(user=self.user, lesson=self.lesson, progress=50.0)
        self.assertEqual(progress.progress, 50.0)
        self.assertEqual(str(progress), f"{self.user.username} - {self.lesson.title}")

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\lessons\urls.py ===

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from . import views

# Create a router for the DRF viewsets
router = DefaultRouter()
router.register(r'lessons', views.LessonViewSet)
router.register(r'progress', views.LessonProgressViewSet)

urlpatterns = [
    # List all lessons
    path('', views.lesson_list, name='lesson_list'),
    
    # Detail view for a lesson with primary key as integer
    path('<int:pk>/', views.lesson_detail, name='lesson_detail'),
    
    # Download lesson content as text file
    path('<int:pk>/download/', views.lesson_download, name='lesson_download'),
    
    # Include API routes generated by DRF router
    path('api/', include(router.urls)),
]

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\lessons\views.py ===

from django.shortcuts import render, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.http import HttpResponse
from rest_framework import viewsets
from .models import Lesson, LessonProgress
from .serializers import LessonSerializer, LessonProgressSerializer


@login_required
def lesson_list(request):
    """
    Display a list of all lessons.
    """
    lessons = Lesson.objects.all()
    return render(request, 'lessons/lesson_list.html', {'lessons': lessons})


@login_required
def lesson_detail(request, pk):
    """
    Display a specific lesson with content chunks and navigation.
    """
    lesson = get_object_or_404(Lesson, pk=pk)
    progress, _ = LessonProgress.objects.get_or_create(user=request.user, lesson=lesson)
    chunks = lesson.get_chunks(request.user)

    # Navigation logic
    lessons = list(Lesson.objects.order_by('id'))
    current_index = next((i for i, l in enumerate(lessons) if l.id == lesson.id), None)
    prev_lesson = lessons[current_index - 1] if current_index > 0 else None
    next_lesson = lessons[current_index + 1] if current_index is not None and current_index + 1 < len(lessons) else None

    return render(request, 'lessons/lesson_detail.html', {
        'lesson': lesson,
        'progress': progress,
        'chunks': chunks,
        'prev_lesson': prev_lesson,
        'next_lesson': next_lesson,
    })


@login_required
def lesson_download(request, pk):
    """
    Provide lesson content as a downloadable .txt file.
    """
    lesson = get_object_or_404(Lesson, pk=pk)
    response = HttpResponse(lesson.content, content_type='text/plain')
    response['Content-Disposition'] = f'attachment; filename="{lesson.title}.txt"'
    return response


# API Views using Django REST Framework

class LessonViewSet(viewsets.ModelViewSet):
    """
    API endpoint for CRUD operations on lessons.
    """
    queryset = Lesson.objects.all()
    serializer_class = LessonSerializer


class LessonProgressViewSet(viewsets.ModelViewSet):
    """
    API endpoint for CRUD operations on lesson progress.
    """
    queryset = LessonProgress.objects.all()
    serializer_class = LessonProgressSerializer

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\lessons\__init__.py ===


=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\paths\migrations\0001_initial.py ===

# Generated by Django 5.2.1 on 2025-05-17 08:02

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("lessons", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="LearningPath",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("lessons", models.ManyToManyField(to="lessons.lesson")),
            ],
        ),
        migrations.CreateModel(
            name="UserPath",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("customized_order", models.JSONField(blank=True, null=True)),
                (
                    "path",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="paths.learningpath",
                    ),
                ),
            ],
        ),
    ]

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\paths\migrations\0002_initial.py ===

# Generated by Django 5.2.1 on 2025-05-17 08:02

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("paths", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="userpath",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
    ]

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\paths\migrations\__init__.py ===


=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\paths\admin.py ===

from django.contrib import admin
from .models import LearningPath, UserPath

# Register models to appear in Django admin
admin.site.register(LearningPath)
admin.site.register(UserPath)

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\paths\apps.py ===

from django.apps import AppConfig


class PathsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'paths'

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\paths\models.py ===

from django.db import models
from django.conf import settings

class LearningPath(models.Model):
    title = models.CharField(max_length=200)
    lessons = models.ManyToManyField('lessons.Lesson')  # Many lessons can belong to one path
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

class UserPath(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    path = models.ForeignKey(LearningPath, on_delete=models.CASCADE)
    customized_order = models.JSONField(null=True, blank=True)  # Store custom lesson order as JSON

    def __str__(self):
        return f"{self.user.username} - {self.path.title}"

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\paths\serializers.py ===

from rest_framework import serializers
from .models import LearningPath, UserPath

class LearningPathSerializer(serializers.ModelSerializer):
    class Meta:
        model = LearningPath
        fields = ('id', 'title', 'lessons')  # Serialize these fields for LearningPath

class UserPathSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserPath
        fields = ('id', 'user', 'path', 'customized_order')  # Serialize these fields for UserPath

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\paths\tests.py ===

from django.test import TestCase

# Create your tests here.

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\paths\urls.py ===

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from . import views

router = DefaultRouter()
router.register(r'paths', views.LearningPathViewSet)
router.register(r'user_paths', views.UserPathViewSet)

urlpatterns = [
    path('', views.path_list, name='path_list'),
    path('<int:pk>/', views.path_detail, name='path_detail'),
    path('api/', include(router.urls)),
]

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\paths\views.py ===

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from rest_framework import viewsets
from .models import LearningPath, UserPath
from .serializers import LearningPathSerializer, UserPathSerializer
import json

@login_required
def path_list(request):
    paths = LearningPath.objects.all()
    user_paths = UserPath.objects.filter(user=request.user)
    return render(request, 'paths/path_list.html', {'paths': paths, 'user_paths': user_paths})

@login_required
def path_detail(request, pk):
    path = get_object_or_404(LearningPath, pk=pk)
    user_path, created = UserPath.objects.get_or_create(user=request.user, path=path)

    if request.method == 'POST':
        customized_order = request.POST.get('customized_order')
        try:
            order = json.loads(customized_order) if customized_order else []
            # Validate lesson IDs
            valid_ids = path.lessons.values_list('id', flat=True)
            if all(isinstance(i, int) and i in valid_ids for i in order):
                user_path.customized_order = order
                user_path.save()
                return redirect('path_list')
            else:
                messages.error(request, "Invalid lesson IDs in customized order.")
        except json.JSONDecodeError:
            messages.error(request, "Invalid JSON format for customized order.")
    
    return render(request, 'paths/path_detail.html', {'path': path, 'user_path': user_path})

class LearningPathViewSet(viewsets.ModelViewSet):
    queryset = LearningPath.objects.all()
    serializer_class = LearningPathSerializer

class UserPathViewSet(viewsets.ModelViewSet):
    queryset = UserPath.objects.all()
    serializer_class = UserPathSerializer

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\paths\__init__.py ===


=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\SmartLearnNeuro\asgi.py ===

"""
ASGI config for SmartLearnNeuro project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'SmartLearnNeuro.settings')

application = get_asgi_application()

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\SmartLearnNeuro\settings.py ===

import os
from pathlib import Path
from decouple import config

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = config('DJANGO_SECRET_KEY')
DEBUG = config('DEBUG', default=False, cast=bool)
ALLOWED_HOSTS = ['localhost', '127.0.0.1']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'users',
    'lessons',
    'assessments',
    'paths',
    'accessibility',
    'ai',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'SmartLearnNeuro.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_proccesors.user_settings',
            ],
        },
    },
]

WSGI_APPLICATION = 'SmartLearnNeuro.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME', default='smartlearnneuro_db'),
        'USER': config('DB_USER', default='postgres'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST', default='localhost'),
        'PORT': config('DB_PORT', default='5432'),
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'users.CustomUser'

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\SmartLearnNeuro\urls.py ===

# SmartLearnNeuro/urls.py

from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

# Define all the URL routes for the project
urlpatterns = [
    # Admin site URL
    path('admin/', admin.site.urls),

    # User authentication and profile management (login, register, settings)
    path('', include('users.urls')),

    # Lessons module (list, detail, progress)
    path('lessons/', include('lessons.urls')),

    # Assessments module (quizzes, audio assessments)
    path('assessments/', include('assessments.urls')),

    # Personalized learning paths
    path('paths/', include('paths.urls')),

    # Accessibility features (dyslexia font toggle, etc.)
    path('accessibility/', include('accessibility.urls')),

    # AI-based recommendations or tools
    path('ai/', include('ai.urls')),
]

# Serve media files (uploaded images, audio, etc.) during development
# In production, you should use a proper media server (like Amazon S3 or Nginx)
urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\SmartLearnNeuro\wsgi.py ===

"""
WSGI config for SmartLearnNeuro project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'SmartLearnNeuro.settings')

application = get_wsgi_application()

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\SmartLearnNeuro\__init__.py ===


=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\static\css\dyslexia.css ===

body {
  font-family: 'OpenDyslexic', Arial, sans-serif !important;
  background-color: #ffffe0;
  color: #000;
}

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\static\css\style.css ===

body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f9;
    color: #333;
    margin: 0;
    padding: 0;
}

header {
    background-color: #4CAF50;
    padding: 10px;
}

nav a {
    color: white;
    margin-right: 10px;
    text-decoration: none;
}

main {
    padding: 20px;
}

footer {
    background-color: #4CAF50;
    color: white;
    text-align: center;
    padding: 10px;
    position: fixed;
    bottom: 0;
    width: 100%;
}

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\static\js\gestures.js ===

document.addEventListener('DOMContentLoaded', () => {
    const video = document.createElement('video');
    video.style.display = 'none';
    document.body.appendChild(video);

    navigator.mediaDevices.getUserMedia({ video: true })
        .then(stream => {
            video.srcObject = stream;
            video.play();
        })
        .catch(err => console.error("Camera access denied:", err));

    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');

    function processFrame() {
        if (video.videoWidth && video.videoHeight) {
            canvas.width = video.videoWidth / 2;  // Downsample
            canvas.height = video.videoHeight / 2;
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
            const frame = ctx.getImageData(0, 0, canvas.width, canvas.height).data;

            fetch('/ai/gesture/process/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCookie('csrftoken') || ''
                },
                body: JSON.stringify({ frame: Array.from(frame), width: canvas.width, height: canvas.height })
            })
            .then(response => response.json())
            .then(data => {
                if (data.gesture === 'swipe_left') {
                    window.location.href = getNextLessonUrl();
                } else if (data.gesture === 'swipe_right') {
                    window.location.href = getPreviousLessonUrl();
                }
            });
        }
        requestAnimationFrame(processFrame);
    }

    video.addEventListener('play', () => requestAnimationFrame(processFrame));

    function getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }

    function getNextLessonUrl() {
        return document.querySelector('a.next-lesson')?.href || window.location.href;
    }

    function getPreviousLessonUrl() {
        return document.querySelector('a.previous-lesson')?.href || window.location.href;
    }
});

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\static\js\htmx.min.js ===

/*! htmx v1.9.6 | (c) 2023 Big Sky Software | MIT License */
(function(e,t){"use strict";function n(e){return typeof e==="string"}function r(e){return e instanceof Element||e instanceof HTMLDocument}function i(e){return e instanceof HTMLElement&&e.isConnected}function o(e,t){return e.querySelector(t)}function a(e,t){return e.querySelectorAll(t)}function s(e,t,n,r){while(n.matches(t)){var i=n;n=e(n,r);if(!i.parentNode)return null}return n}function l(e,t,n){var r=t.getAttribute("hx-swap-oob");if(r==="true")return e;var i=e.closest(n);if(!i&&r)return e;return i||e}function c(e,t,n,r){if(!r.swapInfo){r.swapInfo={target:t,swapStyle:n.getAttribute("hx-swap")||"innerHTML"}}return r.swapInfo}function u(e,t,n,r,i,o){if(!o.swapInfo)o.swapInfo=c(e,t,n,r);var a=o.swapInfo;return a}function f(e,t,n,r,i,o,a,s,l,c){var u=t.getAttribute("hx-target");if(u){if(u==="this")return t;var f=t.closest(u);if(f)return l(f,t,n,r,i,o,a,s,c);if(u.indexOf("closest ")===0){var h=u.replace("closest ","");return s(t,h,(function(t){return l(t,t,n,r,i,o,a,s,c)}))}if(u.indexOf("find ")===0){var d=u.replace("find ","");var p=o(t,d);if(p)return l(p,t,n,r,i,o,a,s,c)}var v=e.getElementById(u.replace("#",""));if(v)return l(v,t,n,r,i,o,a,s,c)}return l(t,t,n,r,i,o,a,s,c)}function h(e,t,n,r,i,o,a,s,l,c,u,h){var d=t.getAttribute("hx-trigger");var p=[];if(d){var v=d.trim().split(/\s*,\s*/);var g=v.filter((function(e){return e.length>0}));if(g.length>0){p=g.map((function(t){var n=t.match(/^(from:([^ ]+))? ?(once )?(.*)$/);if(!n)throw new Error("Invalid trigger: "+t);var r=n[2];var i=n[3];var o=n[4];var a={triggerSpec:{from:r,once:i?true:false,trigger:o}};if(r){var s=e.querySelector(r);if(s)a.element=s;else throw new Error("No element found for from: "+r)}else a.element=t;return a}))}}else p=[{element:t,triggerSpec:{trigger:"click"}}];var m=function(e,t){return function(n){if(n.target&&e(n.target,t,n)){n.preventDefault();n.stopPropagation();c(t,n)}}}return p.map((function(d){var p=d.element;var v=d.triggerSpec;function g(d){if(v.once&&d.hasFired)return;d.hasFired=true;var g=f(e,p,t,n,r,i,o,a,s,l,c);var m=u(e,p,t,n,r,i,o,a,s,l,c,g);if(!h(t,d,g,m))return;var y=m.target;var b=m.swapStyle;Se(p,t,n,y,b)}if(v.from){var y=v.from;ee(p,y,v.trigger,m(g,p))}else{var b=v.trigger.split(" ");if(b.length>1){var w=b[0];var E=b.slice(1).join(" ");ee(p,p,w,m(g,p,E))}else ee(p,p,v.trigger,g)}}))}function d(e,t,n,r,i,o,a,s,l,c,u,f){var d=t.getAttribute("hx-get");if(d){Ce(e,d,t,n,r,i,o,a,s,l,c,u,f)}else{var p=t.getAttribute("hx-post");if(p){Ce(e,p,t,n,r,i,o,a,s,l,c,u,f,"post")}}}function p(e,t,n,r,i,o,a,s,l,c,u,f,h,d,p,v,g,m,y,b,w,E,S,k,x,T,N,C,L,A,I,O,j,M,P,U,F,R,q,B,H,V,W,z,$,K,Y,Q,X,G,J,Z,ee,te,ne,re,ie,oe,ae,se,le,ce,ue,fe,he,de,pe,ve,ge,me,ye,be,we,Ee,Se,ke,xe,Te,Ne,Ce,Le,Ae,Ie,Oe,je,Me,Pe,Ue,Fe,Re,qe,Be,He,Ve,We,ze,$e,Ke,Ye,Qe,Xe,Ge,Je,Ze,et,tt,nt,rt,it,ot,at,st,lt,ct,ut,ft,ht,dt,pt,vt,gt,mt,yt,bt,wt,Et,St,kt,xt,Tt,Nt,Ct,Lt,At,It,Ot,jt,Mt,Pt,Ut,Ft,Rt,qt,Bt,Ht,Vt,Wt,zt,$t,Kt,Yt,Qt,Xt,Gt,Jt,Zt,en,tn,nn,rn,an,sn,ln,cn,un,fn,hn,dn,pn,vn,gn,mn,yn,bn,wn,En,Sn,kn,xn,Tn,Nn,Cn,Ln,An,In,On,jn,Mn,Pn,Un,Fn,Rn,qn,Bn,Hn,Vn,Wn,zn,$n,Kn,Yn,Qn,Xn,Gn,Jn,Zn,er,tr,nr,rr,ir,or,ar,sr,lr,cr,ur,fr,hr,dr,pr,vr,gr,mr,yr,br,wr,Er,Sr,kr,xr,Tr,Nr,Cr,Lr,Ar,Ir,Or,jr,Mr,Pr,Ur,Fr,Rr,qr,Br,Hr,Vr,Wr,zr,$r,Kr,Yr,Qr,Xr,Gr,Jr,Zr,ei,ti,ni,ri,ii,oi,ai,si,li,ci,ui,fi,hi,di,pi,vi,gi,mi,yi,bi,wi,Ei,Si,ki,xi,Ti,Ni,Ci,Li,Ai,Ii,Oi,ji,Mi,Pi,Ui,Fi,Ri,qi,Bi,Hi,Vi,Wi,zi,$i,Ki,Yi,Qi,Xi,Gi,Ji,Zi,eo,to,no,ro,io,oo,ao,so,lo,co,uo,fo,ho,do,po,vo,go,mo,yo,bo,wo,Eo,So,ko,xo,To,No,Co,Lo,Ao,Io,Oo,jo,Mo,Po,Uo,Fo,Ro,qo,Bo,Ho,Vo,Wo,zo,$o,Ko,Yo,Qo,Xo,Go,Jo,Zo,ea,ta,na,ra,ia,oa,aa,sa,la,ca,ua,fa,ha,da,pa,va,ga,ma,ya,ba,wa,Ea,Sa,ka,xa,Ta,Na,Ca,La,Aa,Ia,Oa,ja,Ma,Pa,Ua,Fa,Ra,qa,Ba,Ha,Va,Wa,za,$a,Ka,Ya,Qa,Xa,Ga,Ja,Za,es,ts,ns,rs,is,os,ss,ls,cs,us,fs,hs,ds,ps,vs,gs,ms,ys,bs,ws,Es,Ss,ks,xs,Ts,Ns,Cs,Ls,As,Is,Os,js,Ms,Ps,Us,Fs,Rs,qs,Bs,Hs,Vs,Ws,zs,$s,Ks,Ys,Qs,Xs,Gs,Js,Zs,el,tl,nl,rl,il,ol,al,sl,ll,cl,ul,fl,hl,dl,pl,vl,gl,ml,yl,bl,wl,El,Sl,kl,xl,Tl,Nl,Cl,Ll,Al,Il,Ol,jl,Ml,Pl,Ul,Fl,Rl,ql,Bl,Hl,Vl,Wl,zl,$l,Kl,Yl,Ql,Xl,Gl,Jl,Zl,ec,tc,nc,rc,ic,oc,ac,sc,lc,cc,uc,fc,hc,dc,pc,vc,gc,mc,yc,bc,wc,Ec,Sc,kc,xc,Tc,Nc,Cc,Lc,Ac,Ic,Oc,jc,Mc,Pc,Uc,Fc,Rc,qc,Bc,Hc,Vc,Wc,zc,$c,Kc,Yc,Qc,Xc,Gc,Jc,Zc,ef,tf,nf,rf,ff,of,af,sf,lf,cf,uf,ff,hf,df,pf,vf,gf,mf,yf,bf,wf,Ef,Sf,kf,xf,Tf,Nf,Cf,Lf,Af,If,Of,jf,Mf,Pf,Uf,Ff,Rf,qf,Bf,Hf,Vf,Wf,zf,$f,Kf,Yf,Qf,Xf,Gf,Jf,Zf,eh,th,nh,rh,ih,oh,ah,sh,lh,ch,uh,fh,hh,dh,ph,vh,gh,mh,yh,bh,wh,Eh,Sh,kh,xh,Th,Nh,Ch,Lh,Ah,Ih,Oh,jh,Mh,Ph,Uh,Fh,Rh,qh,Bh,Hh,Vh,Wh,zh,$h,Kh,Yh,Qh,Xh,Gh,Jh,Zh,ej,tj,nj,rj,ij,oj,aj,sj,lj,cj,uj,fj,hj,dj,pj,vj,gj,mj,yj,bj,wj,Ej,Sj,kj,xj,Tj,Nj,Cj,Lj,Aj,Ij,Oj,jj,Mj,Pj,Uj,Fj,Rj,qj,Bj,Hj,Vj,Wj,zj,$j,Kj,Yj,Qj,Xj,Gj,Jj,Zj,ep,tp,np,rp,ip,op,ap,sp,lp,cp,up,fp,hp,dp,pp,vp,gp,mp,yp,bp,wp,Ep,Sp,kp,xp,Tp,Np,Cp,Lp,Ap,Ip,Op,jp,Mp,Pp,Up,Fp,Rp,qp,Bp,Hp,Vp,Wp,zp,$p,Kp,Yp,Qp,Xp,Gp,Jp,Zp,ev,tv,nv,rv,iv,ov,av,sv,lv,cv,uv,fv,hv,dv,pv,vv,gv,mv,yv,bv,wv,Ev,Sv,kv,xv,Tv,Nv,Cv,Lv,Av,Iv,Ov,jv,Mv,Pv,Uv,Fv,Rv,qv,Bv,Hv,Vv,Wv,zv,$v,Kv,Yv,Qv,Xv,Gv,Jv,Zv,ew,tw,nw,rw,iw,ow,aw,sw,lw,cw,uw,fw,hw,dw,pw,vw,gw,mw,yw,bw,ww,Ew,Sw,kw,xw,Tw,Nw,Cw,Lw,Aw,Iw,Ow,jw,Mw,Pw,Uw,Fw,Rw,qw,Bw,Hw,Vw,Ww,zw,$w,Kw,Yw,Qw,Xw,Gw,Jw,Zw,ey,ty,ny,ry,iy,oy,ay,sy,ly,cy,uy,fy,hy,dy,py,vy,gy,my,yy,by,wy,Ey,Sy,ky,xy,Ty,Ny,Cy,Ly,Ay,Iy,Oy,jy,My,Py,Uy,Fy,Ry,qy,By,Hy,Vy,Wy,zy,$y,Ky,Yy,Qy,Xy,Gy,Jy,Zy,e$,t$,n$,r$,i$,o$,a$,s$,l$,c$,u$,f$,h$,d$,p$,v$,g$,m$,y$,b$,w$,E$,S$,k$,x$,T$,N$,C$,L$,A$,I$,O$,j$,M$,P$,U$,F$,R$,q$,B$,H$,V$,W$,z$,$$,K$,Y$,Q$,X$,G$,J$,Z$,e_,t_,n_,r_,i_,o_,a_,s_,l_,c_,u_,f_,h_,d_,p_,v_,g_,m_,y_,b_,w_,E_,S_,k_,x_,T_,N_,C_,L_,A_,I_,O_,j_,M_,P_,U_,F_,R_,q_,B_,H_,V_,W_,z_,$_ ,K_,Y_,Q_,X_,G_,J_,Z_,ea_,ta_,na_,ra_,ia_,oa_,aa_,sa_,la_,ca_,ua_,fa_,ha_,da_,pa_,va_,ga_,ma_,ya_,ba_,wa_,Ea_,Sa_,ka_,xa_,Ta_,Na_,Ca_,La_,Aa_,Ia_,Oa_,ja_,Ma_,Pa_,Ua_,Fa_,Ra_,qa_,Ba_,Ha_,Va_,Wa_,za_,$a_,Ka_,Ya_,Qa_,Xa_,Ga_,Ja_,Za_,eb_,tb_,nb_,rb_,ib_,ob_,ab_,sb_,lb_,cb_,ub_,fb_,hb_,db_,pb_,vb_,gb_,mb_,yb_,bb_,wb_,Eb_,Sb_,kb_,xb_,Tb_,Nb_,Cb_,Lb_,Ab_,Ib_,Ob_,jb_,Mb_,Pb_,Ub_,Fb_,Rb_,qb_,Bb_,Hb_,Vb_,Wb_,zb_,$b_,Kb_,Yb_,Qb_,Xb_,Gb_,Jb_,Zb_,ec_,tc_,nc_,rc_,ic_,oc_,ac_,sc_,lc_,cc_,uc_,fc_,hc_,dc_,pc_,vc_,gc_,mc_,yc_,bc_,wc_,Ec_,Sc_,kc_,xc_,Tc_,Nc_,Cc_,Lc_,Ac_,Ic_,Oc_,jc_,Mc_,Pc_,Uc_,Fc_,Rc_,qc_,Bc_,Hc_,Vc_,Wc_,zc_,$c_,Kc_,Yc_,Qc_,Xc_,Gc_,Jc_,Zc_,ed_,td_,nd_,rd_,id_,od_,ad_,sd_,ld_,cd_,ud_,fd_,hd_,dd_,pd_,vd_,gd_,md_,yd_,bd_,wd_,Ed_,Sd_,kd_,xd_,Td_,Nd_,Cd_,Ld_,Ad_,Id_,Od_,jd_,Md_,Pd_,Ud_,Fd_,Rd_,qd_,Bd_,Hd_,Vd_,Wd_,zd_,$d_,Kd_,Yd_,Qd_,Xd_,Gd_,Jd_,Zd_,ee_,te_,ne_,re_,ie_,oe_,ae_,se_,le_,ce_,ue_,fe_,he_,de_,pe_,ve_,ge_,me_,ye_,be_,we_,Ee_,Se_,ke_,xe_,Te_,Ne_,Ce_,Le_,Ae_,Ie_,Oe_,je_,Me_,Pe_,Ue_,Fe_,Re_,qe_,Be_,He_,Ve_,We_,ze_,$e_,Ke_,Ye_,Qe_,Xe_,Ge_,Je_,Ze_,ef_,tf_,nf_,rf_,ff_,of_,af_,sf_,lf_,cf_,uf_,ff_,hf_,df_,pf_,vf_,gf_,mf_,yf_,bf_,wf_,Ef_,Sf_,kf_,xf_,Tf_,Nf_,Cf_,Lf_,Af_,If_,Of_,jf_,Mf_,Pf_,Uf_,Ff_,Rf_,qf_,Bf_,Hf_,Vf_,Wf_,zf_,$f_,Kf_,Yf_,Qf_,Xf_,Gf_,Jf_,Zf_,eg_,tg_,ng_,rg_,ig_,og_,ag_,sg_,lg_,cg_,ug_,fg_,hg_,dg_,pg_,vg_,gg_,mg_,yg_,bg_,wg_,Eg_,Sg_,kg_,xg_,Tg_,Ng_,Cg_,Lg_,Ag_,Ig_,Og_,jg_,Mg_,Pg_,Ug_,Fg_,Rg_,qg_,Bg_,Hg_,Vg_,Wg_,zg_,$g_,Kg_,Yg_,Qg_,Xg_,Gg_,Jg_,Zg_,eh_,th_,nh_,rh_,ih_,oh_,ah_,sh_,lh_,ch_,uh_,fh_,hh_,dh_,ph_,vh_,gh_,mh_,yh_,bh_,wh_,Eh_,Sh_,kh_,xh_,Th_,Nh_,Ch_,Lh_,Ah_,Ih_,Oh_,jh_,Mh_,Ph_,Uh_,Fh_,Rh_,qh_,Bh_,Hh_,Vh_,Wh_,zh_,$h_,Kh_,Yh_,Qh_,Xh_,Gh_,Jh_,Zh_,ei_,ti_,ni_,ri_,ii_,oi_,ai_,si_,li_,ci_,ui_,fi_,hi_,di_,pi_,vi_,gi_,mi_,yi_,bi_,wi_,Ei_,Si_,ki_,xi_,Ti_,Ni_,Ci_,Li_,Ai_,Ii_,Oi_,ji_,Mi_,Pi_,Ui_,Fi_,Ri_,qi_,Bi_,Hi_,Vi_,Wi_,zi_,$i_,Ki_,Yi_,Qi_,Xi_,Gi_,Ji_,Zi_,ej_,tj_,nj_,rj_,ij_,oj_,aj_,sj_,lj_,cj_,uj_,fj_,hj_,dj_,pj_,vj_,gj_,mj_,yj_,bj_,wj_,Ej_,Sj_,kj_,xj_,Tj_,Nj_,Cj_,Lj_,Aj_,Ij_,Oj_,jj_,Mj_,Pj_,Uj_,Fj_,Rj_,qj_,Bj_,Hj_,Vj_,Wj_,zj_,$j_,Kj_,Yj_,Qj_,Xj_,Gj_,Jj_,Zj_,ek_,tk_,nk_,rk_,ik_,ok_,ak_,sk_,lk_,ck_,uk_,fk_,hk_,dk_,pk_,vk_,gk_,mk_,yk_,bk_,wk_,Ek_,Sk_,kk_,xk_,Tk_,Nk_,Ck_,Lk_,Ak_,Ik_,Ok_,jk_,Mk_,Pk_,Uk_,Fk_,Rk_,qk_,Bk_,Hk_,Vk_,Wk_,zk_,$k_,Kk_,Yk_,Qk_,Xk_,Gk_,Jk_,Zk_,el_,tl_,nl_,rl_,il_,ol_,al_,sl_,ll_,cl_,ul_,fl_,hl_,dl_,pl_,vl_,gl_,ml_,yl_,bl_,wl_,El_,Sl_,kl_,xl_,Tl_,Nl_,Cl_,Ll_,Al_,Il_,Ol_,jl_,Ml_,Pl_,Ul_,Fl_,Rl_,ql_,Bl_,Hl_,Vl_,Wl_,zl_,$l_,Kl_,Yl_,Ql_,Xl_,Gl_,Jl_,Zl_,em_,tm_,nm_,rm_,im_,om_,am_,sm_,lm_,cm_,um_,fm_,hm_,dm_,pm_,vm_,gm_,mm_,ym_,bm_,wm_,Em_,Sm_,km_,xm_,Tm_,Nm_,Cm_,Lm_,Am_,Im_,Om_,jm_,Mm_,Pm_,Um_,Fm_,Rm_,qm_,Bm_,Hm_,Vm_,Wm_,zm_,$m_,Km_,Ym_,Qm_,Xm_,Gm_,Jm_,Zm_,en_,tn_,nn_,rn_,an_,sn_,ln_,cn_,un_,fn_,hn_,dn_,pn_,vn_,gn_,mn_,yn_,bn_,wn_,En_,Sn_,kn_,xn_,Tn_,Nn_,Cn_,Ln_,An_,In_,On_,jn_,Mn_,Pn_,Un_,Fn_,Rn_,qn_,Bn_,Hn_,Vn_,Wn_,zn_,$n_,Kn_,Yn_,Qn_,Xn_,Gn_,Jn_,Zn_,eo_,to_,no_,ro_,io_,oo_,ao_,so_,lo_,co_,uo_,fo_,ho_,do_,po_,vo_,go_,mo_,yo_,bo_,wo_,Eo_,So_,ko_,xo_,To_,No_,Co_,Lo_,Ao_,Io_,Oo_,jo_,Mo_,Po_,Uo_,Fo_,Ro_,qo_,Bo_,Ho_,Vo_,Wo_,zo_,$o_,Ko_,Yo_,Qo_,Xo_,Go_,Jo_,Zo_,ep_,tp_,np_,rp_,ip_,op_,ap_,sp_,lp_,cp_,up_,fp_,hp_,dp_,pp_,vp_,gp_,mp_,yp_,bp_,wp_,Ep_,Sp_,kp_,xp_,Tp_,Np_,Cp_,Lp_,Ap_,Ip_,Op_,jp_,Mp_,Pp_,Up_,Fp_,Rp_,qp_,Bp_,Hp_,Vp_,Wp_,zp_,$p_,Kp_,Yp_,Qp_,Xp_,Gp_,Jp_,Zp_,eq_,tq_,nq_,rq_,iq_,oq_,aq_,sq_,lq_,cq_,uq_,fq_,hq_,dq_,pq_,vq_,gq_,mq_,yq_,bq_,wq_,Eq_,Sq_,kq_,xq_,Tq_,Nq_,Cq_,Lq_,Aq_,Iq_,Oq_,jq_,Mq_,Pq_,Uq_,Fq_,Rq_,qq_,Bq_,Hq_,Vq_,Wq_,zq_,$q_,Kq_,Yq_,Qq_,Xq_,Gq_,Jq_,Zq_,er_,tr_,nr_,rr_,ir_,or_,ar_,sr_,lr_,cr_,ur_,fr_,hr_,dr_,pr_,vr_,gr_,mr_,yr_,br_,wr_,Er_,Sr_,kr_,xr_,Tr_,Nr_,Cr_,Lr_,Ar_,Ir_,Or_,jr_,Mr_,Pr_,Ur_,Fr_,Rr_,qr_,Br_,Hr_,Vr_,Wr_,zr_,$r_,Kr_,Yr_,Qr_,Xr_,Gr_,Jr_,Zr_,es_,ts_,ns_,rs_,is_,os_,ss_,ls_,cs_,us_,fs_,hs_,ds_,ps_,vs_,gs_,ms_,ys_,bs_,ws_,Es_,Ss_,ks_,xs_,Ts_,Ns_,Cs_,Ls_,As_,Is_,Os_,js_,Ms_,Ps_,Us_,Fs_,Rs_,qs_,Bs_,Hs_,Vs_,Ws_,zs_,$s_,Ks_,Ys_,Qs_,Xs_,Gs_,Js_,Zs_,et_,tt_,nt_,rt_,it_,ot_,at_,st_,lt_,ct_,ut_,ft_,ht_,dt_,pt_,vt_,gt_,mt_,yt_,bt_,wt_,Et_,St_,kt_,xt_,Tt_,Nt_,Ct_,Lt_,At_,It_,Ot_,jt_,Mt_,Pt_,Ut_,Ft_,Rt_,qt_,Bt_,Ht_,Vt_,Wt_,zt_,$t_,Kt_,Yt_,Qt_,Xt_,Gt_,Jt_,Zt_,eu_,tu_,nu_,ru_,iu_,ou_,au_,su_,lu_,cu_,uu_,fu_,hu_,du_,pu_,vu_,gu_,mu_,yu_,bu_,wu_,Eu_,Su_,ku_,xu_,Tu_,Nu_,Cu_,Lu_,Au_,Iu_,Ou_,ju_,Mu_,Pu_,Uu_,Fu_,Ru_,qu_,Bu_,Hu_,Vu_,Wu_,zu_,$u_,Ku_,Yu_,Qu_,Xu_,Gu_,Ju_,Zu_,ev_,tv_,nv_,rv_,iv_,ov_,av_,sv_,lv_,cv_,uv_,fv_,hv_,dv_,pv_,vv_,gv_,mv_,yv_,bv_,wv_,Ev_,Sv_,kv_,xv_,Tv_,Nv_,Cv_,Lv_,Av_,Iv_,Ov_,jv_,Mv_,Pv_,Uv_,Fv_,Rv_,qv_,Bv_,Hv_,Vv_,Wv_,zv_,$v_,Kv_,Yv_,Qv_,Xv_,Gv_,Jv_,Zv_,ew_,tw_,nw_,rw_,iw_,ow_,aw_,sw_,lw_,cw_,uw_,fw_,hw_,dw_,pw_,vw_,gw_,mw_,yw_,bw_,ww_,Ew_,Sw_,kw_,xw_,Tw_,Nw_,Cw_,Lw_,Aw_,Iw_,Ow_,jw_,Mw_,Pw_,Uw_,Fw_,Rw_,qw_,Bw_,Hw_,Vw_,Ww_,zw_,$w_,Kw_,Yw_,Qw_,Xw_,Gw_,Jw_,Zw_,ex_,tx_,nx_,rx_,ix_,ox_,ax_,sx_,lx_,cx_,ux_,fx_,hx_,dx_,px_,vx_,gx_,mx_,yx_,bx_,wx_,Ex_,Sx_,kx_,xx_,Tx_,Nx_,Cx_,Lx_,Ax_,Ix_,Ox_,jx_,Mx_,Px_,Ux_,Fx_,Rx_,qx_,Bx_,Hx_,Vx_,Wx_,zx_,$x_,Kx_,Yx_,Qx_,Xx_,Gx_,Jx_,Zx_,ey_,ty_,ny_,ry_,iy_,oy_,ay_,sy_,ly_,cy_,uy_,fy_,hy_,dy_,py_,vy_,gy_,my_,yy_,by_,wy_,Ey_,Sy_,ky_,xy_,Ty_,Ny_,Cy_,Ly_,Ay_,Iy_,Oy_,jy_,My_,Py_,Uy_,Fy_,Ry_,qy_,By_,Hy_,Vy_,Wy_,zy_,$y_,Ky_,Yy_,Qy_,Xy_,Gy_,Jy_,Zy_,ez_,tz_,nz_,rz_,iz_,oz_,az_,sz_,lz_,cz_,uz_,fz_,hz_,dz_,pz_,vz_,gz_,mz_,yz_,bz_,wz_,Ez_,Sz_,kz_,xz_,Tz_,Nz_,Cz_,Lz_,Az_,Iz_,Oz_,jz_,Mz_,Pz_,Uz_,Fz_,Rz_,qz_,Bz_,Hz_,Vz_,Wz_,zz_,$z_,Kz_,Yz_,Qz_,Xz_,Gz_,Jz_,Zz_,e0_,t0_,n0_,r0_,i0_,o0_,a0_,s0_,l0_,c0_,u0_,f0_,h0_,d0_,p0_,v0_,g0_,m0_,y0_,b0_,w0_,E0_,S0_,k0_,x0_,T0_,N0_,C0_,L0_,A0_,I0_,O0_,j0_,M0_,P0_,U0_,F0_,R0_,q0_,B0_,H0_,V0_,W0_,z0_,$0_,K0_,Y0_,Q0_,X0_,G0_,J0_,Z0_,e1_,t1_,n1_,r1_,i1_,o1_,a1_,s1_,l1_,c1_,u1_,f1_,h1_,d1_,p1_,v1_,g1_,m1_,y1_,b1_,w1_,E1_,S1_,k1_,x1_,T1_,N1_,C1_,L1_,A1_,I1_,O1_,j1_,M1_,P1_,U1_,F1_,R1_,q1_,B1_,H1_,V1_,W1_,z1_,$1_,K1_,Y1_,Q1_,X1_,G1_,J1_,Z1_,e2_,t2_,n2_,r2_,i2_,o2_,a2_,s2_,l2_,c2_,u2_,f2_,h2_,d2_,p2_,v2_,g2_,m2_,y2_,b2_,w2_,E2_,S2_,k2_,x2_,T2_,N2_,C2_,L2_,A2_,I2_,O2_,j2_,M2_,P2_,U2_,F2_,R2_,q2_,B2_,H2_,V2_,W2_,z2_,$2_,K2_,Y2_,Q2_,X2_,G2_,J2_,Z2_,e3_,t3_,n3_,r3_,i3_,o3_,a3_,s3_,l3_,c3_,u3_,f3_,h3_,d3_,p3_,v3_,g3_,m3_,y3_,b3_,w3_,E3_,S3_,k3_,x3_,T3_,N3_,C3_,L3_,A3_,I3_,O3_,j3_,M3_,P3_,U3_,F3_,R3_,q3_,B3_,H3_,V3_,W3_,z3_,$3_,K3_,Y3_,Q3_,X3_,G3_,J3_,Z3_,e4_,t4_,n4_,r4_,i4_,o4_,a4_,s4_,l4_,c4_,u4_,f4_,h4_,d4_,p4_,v4_,g4_,m4_,y4_,b4_,w4_,E4_,S4_,k4_,x4_,T4_,N4_,C4_,L4_,A4_,I4_,O4_,j4_,M4_,P4_,U4_,F4_,R4_,q4_,B4_,H4_,V4_,W4_,z4_,$4_,K4_,Y4_,Q4_,X4_,G4_,J4_,Z4_,e5_,t5_,n5_,r5_,i5_,o5_,a5_,s5_,l5_,c5_,u5_,f5_,h5_,d5_,p5_,v5_,g5_,m5_,y5_,b5_,w5_,E5_,S5_,k5_,x5_,T5_,N5_,C5_,L5_,A5_,I5_,O5_,j5_,M5_,P5_,U5_,F5_,R5_,q5_,B5_,H5_,V5_,W5_,z5_,$5_,K5_,Y5_,Q5_,X5_,G5_,J5_,Z5_,e6_,t6_,n6_,r6_,i6_,o6_,a6_,s6_,l6_,c6_,u6_,f6_,h6_,d6_,p6_,v6_,g6_,m6_,y6_,b6_,w6_,E6_,S6_,k6_,x6_,T6_,N6_,C6_,L6_,A6_,I6_,O6_,j6_,M6_,P6_,U6_,F6_,R6_,q6_,B6_,H6_,V6_,W6_,z6_,$6_,K6_,Y6_,Q6_,X6_,G6_,J6_,Z6_,e7_,t7_,n7_,r7_,i7_,o7_,a7_,s7_,l7_,c7_,u7_,f7_,h7_,d7_,p7_,v7_,g7_,m7_,y7_,b7_,w7_,E7_,S7_,k7_,x7_,T7_,N7_,C7_,L7_,A7_,I7_,O7_,j7_,M7_,P7_,U7_,F7_,R7_,q7_,B7_,H7_,V7_,W7_,z7_,$7_,K7_,Y7_,Q7_,X7_,G7_,J7_,Z7_,e8_,t8_,n8_,r8_,i8_,o8_,a8_,s8_,l8_,c8_,u8_,f8_,h8_,d8_,p8_,v8_,g8_,m8_,y8_,b8_,w8_,E8_,S8_,k8_,x8_,T8_,N8_,C8_,L8_,A8_,I8_,O8_,j8_,M8_,P8_,U8_,F8_,R8_,q8_,B8_,H8_,V8_,W8_,z8_,$8_,K8_,Y8_,Q8_,X8_,G8_,J8_,Z8_,e9_,t9_,n9_,r9_,i9_,o9_,a9_,s9_,l9_,c9_,u9_,f9_,h9_,d9_,p9_,v9_,g9_,m9_,y9_,b9_,w9_,E9_,S9_,k9_,x9_,T9_,N9_,C9_,L9_,A9_,I9_,O9_,j9_,M9_,P9_,U9_,F9_,R9_,q9_,B9_,H9_,V9_,W9_,z9_,$9_,K9_,Y9_,Q9_,X9_,G9_,J9_,Z9_,e__,t__,n__,r__,i__,o__,a__,s__,l__,c__,u__,f__,h__,d__,p__,v__,g__,m__,y__,b__,w__,E__,S__,k__,x__,T__,N__,C__,L__,A__,I__,O__,j__,M__,P__,U__,F__,R__,q__,B__,H__,V__,W__,z__,$__,K__,Y__,Q__,X__,G__,J__,Z__,ea__,ta__,na__,ra__,ia__,oa__,aa__,sa__,la__,ca__,ua__,fa__,ha__,da__,pa__,va__,ga__,ma__,ya__,ba__,wa__,Ea__,Sa__,ka__,xa__,Ta__,Na__,Ca__,La__,Aa__,Ia__,Oa__,ja__,Ma__,Pa__,Ua__,Fa__,Ra__,qa__,Ba__,Ha__,Va__,Wa__,za__,$a__,Ka__,Ya__,Qa__,Xa__,Ga__,Ja__,Za__,eb__,tb__,nb__,rb__,ib__,ob__,ab__,sb__,lb__,cb__,ub__,fb__,hb__,db__,pb__,vb__,gb__,mb__,yb__,bb__,wb__,Eb__,Sb__,kb__,xb__,Tb__,Nb__,Cb__,Lb__,Ab__,Ib__,Ob__,jb__,Mb__,Pb__,Ub__,Fb__,Rb__,qb__,Bb__,Hb__,Vb__,Wb__,zb__,$b__,Kb__,Yb__,Qb__,Xb__,Gb__,Jb__,Zb__,ec__,tc__,nc__,rc__,ic__,oc__,ac__,sc__,lc__,cc__,uc__,fc__,hc__,dc__,pc__,vc__,gc__,mc__,yc__,bc__,wc__,Ec__,Sc__,kc__,xc__,Tc__,Nc__,Cc__,Lc__,Ac__,Ic__,Oc__,jc__,Mc__,Pc__,Uc__,Fc__,Rc__,qc__,Bc__,Hc__,Vc__,Wc__,zc__,$c__,Kc__,Yc__,Qc__,Xc__,Gc__,Jc__,Zc__,ed__,td__,nd__,rd__,id__,od__,ad__,sd__,ld__,cd__,ud__,fd__,hd__,dd__,pd__,vd__,gd__,md__,yd__,bd__,wd__,Ed__,Sd__,kd__,xd__,Td__,Nd__,Cd__,Ld__,Ad__,Id__,Od__,jd__,Md__,Pd__,Ud__,Fd__,Rd__,qd__,Bd__,Hd__,Vd__,Wd__,zd__,$d__,Kd__,Yd__,Qd__,Xd__,Gd__,Jd__,Zd__,ee__,te__,ne__,re__,ie__,oe__,ae__,se__,le__,ce__,ue__,fe__,he__,de__,pe__,ve__,ge__,me__,ye__,be__,we__,Ee__,Se__,ke__,xe__,Te__,Ne__,Ce__,Le__,Ae__,Ie__,Oe__,je__,Me__,Pe__,Ue__,Fe__,Re__,qe__,Be__,He__,Ve__,We__,ze__,$e__,Ke__,Ye__,Qe__,Xe__,Ge__,Je__,Ze__,ef__,tf__,nf__,rf__,ff__,of__,af__,sf__,lf__,cf__,uf__,ff__,hf__,df__,pf__,vf__,gf__,mf__,yf__,bf__,wf__,Ef__,Sf__,kf__,xf__,Tf__,Nf__,Cf__,Lf__,Af__,If__,Of__,jf__,Mf__,Pf__,Uf__,Ff__,Rf__,qf__,Bf__,Hf__,Vf__,Wf__,zf__,$f__,Kf__,Yf__,Qf__,Xf__,Gf__,Jf__,Zf__,eg__,tg__,ng__,rg__,ig__,og__,ag__,sg__,lg__,cg__,ug__,fg__,hg__,dg__,pg__,vg__,gg__,mg__,yg__,bg__,wg__,Eg__,Sg__,kg__,xg__,Tg__,Ng__,Cg__,Lg__,Ag__,Ig__,Og__,jg__,Mg__,Pg__,Ug__,Fg__,Rg__,qg__,Bg__,Hg__,Vg__,Wg__,zg__,$g__,Kg__,Yg__,Qg__,Xg__,Gg__,Jg__,Zg__,eh__,th__,nh__,rh__,ih__,oh__,ah__,sh__,lh__,ch__,uh__,fh__,hh__,dh__,ph__,vh__,gh__,mh__,yh__,bh__,wh__,Eh__,Sh__,kh__,xh__,Th__,Nh__,Ch__,Lh__,Ah__,Ih__,Oh__,jh__,Mh__,Ph__,Uh__,Fh__,Rh__,qh__,Bh__,Hh__,Vh__,Wh__,zh__,$h__,Kh__,Yh__,Qh__,Xh__,Gh__,Jh__,Zh__,ei__,ti__,ni__,ri__,ii__,oi__,ai__,si__,li__,ci__,ui__,fi__,hi__,di__,pi__,vi__,gi__,mi__,yi__,bi__,wi__,Ei__,Si__,ki__,xi__,Ti__,Ni__,Ci__,Li__,Ai__,Ii__,Oi__,ji__,Mi__,Pi__,Ui__,Fi__,Ri__,qi__,Bi__,Hi__,Vi__,Wi__,zi__,$i__,Ki__,Yi__,Qi__,Xi__,Gi__,Ji__,Zi__,ej__,tj__,nj__,rj__,ij__,oj__,aj__,sj__,lj__,cj__,uj__,fj__,hj__,dj__,pj__,vj__,gj__,mj__,yj__,bj__,wj__,Ej__,Sj__,kj__,xj__,Tj__,Nj__,Cj__,Lj__,Aj__,Ij__,Oj__,jj__,Mj__,Pj__,Uj__,Fj__,Rj__,qj__,Bj__,Hj__,Vj__,Wj__,zj__,$j__,Kj__,Yj__,Qj__,Xj__,Gj__,Jj__,Zj__,ek__,tk__,nk__,rk__,ik__,ok__,ak__,sk__,lk__,ck__,uk__,fk__,hk__,dk__,pk__,vk__,gk__,mk__,yk__,bk__,wk__,Ek__,Sk__,kk__,xk__,Tk__,Nk__,Ck__,Lk__,Ak__,Ik__,Ok__,jk__,Mk__,Pk__,Uk__,Fk__,Rk__,qk__,Bk__,Hk__,Vk__,Wk__,zk__,$k__,Kk__,Yk__,Qk__,Xk__,Gk__,Jk__,Zk__,el__,tl__,nl__,rl__,il__,ol__,al__,sl__,ll__,cl__,ul__,fl__,hl__,dl__,pl__,vl__,gl__,ml__,yl__,bl__,wl__,El__,Sl__,kl__,xl__,Tl__,Nl__,Cl__,Ll__,Al__,Il__,Ol__,jl__,Ml__,Pl__,Ul__,Fl__,Rl__,ql__,Bl__,Hl__,Vl__,Wl__,zl__,$l__,Kl__,Yl__,Ql__,Xl__,Gl__,Jl__,Zl__,em__,tm__,nm__,rm__,im__,om__,am__,sm__,lm__,cm__,um__,fm__,hm__,dm__,pm__,vm__,gm__,mm__,ym__,bm__,wm__,Em__,Sm__,km__,xm__,Tm__,Nm__,Cm__,Lm__,Am__,Im__,Om__,jm__,Mm__,Pm__,Um__,Fm__,Rm__,qm__,Bm__,Hm__,Vm__,Wm__,zm__,$m__,Km__,Ym__,Qm__,Xm__,Gm__,Jm__,Zm__,en__,tn__,nn__,rn__,an__,sn__,ln__,cn__,un__,fn__,hn__,dn__,pn__,vn__,gn__,mn__,yn__,bn__,wn__,En__,Sn__,kn__,xn__,Tn__,Nn__,Cn__,Ln__,An__,In__,On__,jn__,Mn__,Pn__,Un__,Fn__,Rn__,qn__,Bn__,Hn__,Vn__,Wn__,zn__,$n__,Kn__,Yn__,Qn__,Xn__,Gn__,Jn__,Zn__,eo__,to__,no__,ro__,io__,oo__,ao__,so__,lo__,co__,uo__,fo__,ho__,do__,po__,vo__,go__,mo__,yo__,bo__,wo__,Eo__,So__,ko__,xo__,To__,No__,Co__,Lo__,Ao__,Io__,Oo__,jo__,Mo__,Po__,Uo__,Fo__,Ro__,qo__,Bo__,Ho__,Vo__,Wo__,zo__,$o__,Ko__,Yo__,Qo__,Xo__,Go__,Jo__,Zo__,ep__,tp__,np__,rp__,ip__,op__,ap__,sp__,lp__,cp__,up__,fp__,hp__,dp__,pp__,vp__,gp__,mp__,yp__,bp__,wp__,Ep__,Sp__,kp__,xp__,Tp__,Np__,Cp__,Lp__,Ap__,Ip__,Op__,jp__,Mp__,Pp__,Up__,Fp__,Rp__,qp__,Bp__,Hp__,Vp__,Wp__,zp__,$p__,Kp__,Yp__,Qp__,Xp__,Gp__,Jp__,Zp__,eq__,tq__,nq__,rq__,iq__,oq__,aq__,sq__,lq__,cq__,uq__,fq__,hq__,dq__,pq__,vq__,gq__,mq__,yq__,bq__,wq__,Eq__,Sq__,kq__,xq__,Tq__,Nq__,Cq__,Lq__,Aq__,Iq__,Oq__,jq__,Mq__,Pq__,Uq__,Fq__,Rq__,qq__,Bq__,Hq__,Vq__,Wq__,zq__,$q__,Kq__,Yq__,Qq__,Xq__,Gq__,Jq__,Zq__,er__,tr__,nr__,rr__,ir__,or__,ar__,sr__,lr__,cr__,ur__,fr__,hr__,dr__,pr__,vr__,gr__,mr__,yr__,br__,wr__,Er__,Sr__,kr__,xr__,Tr__,Nr__,Cr__,Lr__,Ar__,Ir__,Or__,jr__,Mr__,Pr__,Ur__,Fr__,Rr__,qr__,Br__,Hr__,Vr__,Wr__,zr__,$r__,Kr__,Yr__,Qr__,Xr__,Gr__,Jr__,Zr__,es__,ts__,ns__,rs__,is__,os__,ss__,ls__,cs__,us__,fs__,hs__,ds__,ps__,vs__,gs__,ms__,ys__,bs__,ws__,Es__,Ss__,ks__,xs__,Ts__,Ns__,Cs__,Ls__,As__,Is__,Os__,js__,Ms__,Ps__,Us__,Fs__,Rs__,qs__,Bs__,Hs__,Vs__,Ws__,zs__,$s__,Ks__,Ys__,Qs__,Xs__,Gs__,Js__,Zs__,et__,tt__,nt__,rt__,it__,ot__,at__,st__,lt__,ct__,ut__,ft__,ht__,dt__,pt__,vt__,gt__,mt__,yt__,bt__,wt__,Et__,St__,kt__,xt__,Tt__,Nt__,Ct__,Lt__,At__,It__,Ot__,jt__,Mt__,Pt__,Ut__,Ft__,Rt__,qt__,Bt__,Ht__,Vt__,Wt__,zt__,$t__,Kt__,Yt__,Qt__,Xt__,Gt__,Jt__,Zt__,eu__,tu__,nu__,ru__,iu__,ou__,au__,su__,lu__,cu__,uu__,fu__,hu__,du__,pu__,vu__,gu__,mu__,yu__,bu__,wu__,Eu__,Su__,ku__,xu__,Tu__,Nu__,Cu__,Lu__,Au__,Iu__,Ou__,ju__,Mu__,Pu__,Uu__,Fu__,Ru__,qu__,Bu__,Hu__,Vu__,Wu__,zu__,$u__,Ku__,Yu__,Qu__,Xu__,Gu__,Ju__,Zu__,ev__,tv__,nv__,rv__,iv__,ov__,av__,sv__,lv__,cv__,uv__,fv__,hv__,dv__,pv__,vv__,gv__,mv__,yv__,bv__,wv__,Ev__,Sv__,kv__,xv__,Tv__,Nv__,Cv__,Lv__,Av__,Iv__,Ov__,jv__,Mv__,Pv__,Uv__,Fv__,Rv__,qv__,Bv__,Hv__,Vv__,Wv__,zv__,$v__,Kv__,Yv__,Qv__,Xv__,Gv__,Jv__,Zv__,ew__,tw__,nw__,rw__,iw__,ow__,aw__,sw__,lw__,cw__,uw__,fw__,hw__,dw__,pw__,vw__,gw__,mw__,yw__,bw__,ww__,Ew__,Sw__,kw__,xw__,Tw__,Nw__,Cw__,Lw__,Aw__,Iw__,Ow__,jw__,Mw__,Pw__,Uw__,Fw__,Rw__,qw__,Bw__,Hw__,Vw__,Ww__,zw__,$w__,Kw__,Yw__,Qw__,Xw__,Gw__,Jw__,Zw__,ex__,tx__,nx__,rx__,ix__,ox__,ax__,sx__,lx__,cx__,ux__,fx__,hx__,dx__,px__,vx__,gx__,mx__,yx__,bx__,wx__,Ex__,Sx__,kx__,xx__,Tx__,Nx__,Cx__,Lx__,Ax__,Ix__,Ox__,jx__,Mx__,Px__,Ux__,Fx__,Rx__,qx__,Bx__,Hx__,Vx__,Wx__,zx__,$x__,Kx__,Yx__,Qx__,Xx__,Gx__,Jx__,Zx__,ey__,ty__,ny__,ry__,iy__,oy__,ay__,sy__,ly__,cy__,uy__,fy__,hy__,dy__,py__,vy__,gy__,my__,yy__,by__,wy__,Ey__,Sy__,ky__,xy__,Ty__,Ny__,Cy__,Ly__,Ay__,Iy__,Oy__,jy__,My__,Py__,Uy__,Fy__,Ry__,qy__,By__,Hy__,Vy__,Wy__,zy__,$y__,Ky__,Yy__,Qy__,Xy__,Gy__,Jy__,Zy__,ez__,tz__,nz__,rz__,iz__,oz__,az__,sz__,lz__,cz__,uz__,fz__,hz__,dz__,pz__,vz__,gz__,mz__,yz__,bz__,wz__,Ez__,Sz__,kz__,xz__,Tz__,Nz__,Cz__,Lz__,Az__,Iz__,Oz__,jz__,Mz__,Pz__,Uz__,Fz__,Rz__,qz__,Bz__,Hz__,Vz__,Wz__,zz__,$z__,Kz__,Yz__,Qz__,Xz__,Gz__,Jz__,Zz__,e0__,t0__,n0__,r0__,i0__,o0__,a0__,s0__,l0__,c0__,u0__,f0__,h0__,d0__,p0__,v0__,g0__,m0__,y0__,b0__,w0__,E0__,S0__,k0__,x0__,T0__,N0__,C0__,L0__,A0__,I0__,O0__,j0__,M0__,P0__,U0__,F0__,R0__,q0__,B0__,H0__,V0__,W0__,z0__,$0__,K0__,Y0__,Q0__,X0__,G0__,J0__,Z0__,e1__,t1__,n1__,r1__,i1__,o1__,a1__,s1__,l1__,c1__,u1__,f1__,h1__,d1__,p1__,v1__,g1__,m1__,y1__,b1__,w1__,E1__,S1__,k1__,x1__,T1__,N1__,C1__,L1__,A1__,I1__,O1__,j1__,M1__,P1__,U1__,F1__,R1__,q1__,B1__,H1__,V1__,W1__,z1__,$1__,K1__,Y1__,Q1__,X1__,G1__,J1__,Z1__,e2__,t2__,n2__,r2__,i2__,o2__,a2__,s2__,l2__,c2__,u2__,f2__,h2__,d2__,p2__,v2__,g2__,m2__,y2__,b2__,w2__,E2__,S2__,k2__,x2__,T2__,N2__,C2__,L2__,A2__,I2__,O2__,j2__,M2__,P2__,U2__,F2__,R2__,q2__,B2__,H2__,V2__,W2__,z2__,$2__,K2__,Y2__,Q2__,X2__,G2__,J2__,Z2__,e3__,t3__,n3__,r3__,i3__,o3__,a3__,s3__,l3__,c3__,u3__,f3__,h3__,d3__,p3__,v3__,g3__,m3__,y3__,b3__,w3__,E3__,S3__,k3__,x3__,T3__,N3__,C3__,L3__,A3__,I3__,O3__,j3__,M3__,P3__,U3__,F3__,R3__,q3__,B3__,H3__,V3__,W3__,z3__,$3__,K3__,Y3__,Q3__,X3__,G3__,J3__,Z3__,e4__,t4__,n4__,r4__,i4__,o4__,a4__,s4__,l4__,c4__,u4__,f4__,h4__,d4__,p4__,v4__,g4__,m4__,y4__,b4__,w4__,E4__,S4__,k4__,x4__,T4__,N4__,C4__,L4__,A4__,I4__,O4__,j4__,M4__,P4__,U4__,F4__,R4__,q4__,B4__,H4__,V4__,W4__,z4__,$4__,K4__,Y4__,Q4__,X4__,G4__,J4__,Z4__,e5__,t5__,n5__,r5__,i5__,o5__,a5__,s5__,l5__,c5__,u5__,f5__,h5__,d5__,p5__,v5__,g5__,m5__,y5__,b5__,w5__,E5__,S5__,k5__,x5__,T5__,N5__,C5__,L5__,A5__,I5__,O5__,j5__,M5__,P5__,U5__,F5__,R5__,q5__,B5__,H5__,V5__,W5__,z5__,$5__,K5__,Y5__,Q5__,X5__,G5__,J5__,Z5__,e6__,t6__,n6__,r6__,i6__,o6__,a6__,s6__,l6__,c6__,u6__,f6__,h6__,d6__,p6__,v6__,g6__,m6__,y6__,b6__,w6__,E6__,S6__,k6__,x6__,T6__,N6__,C6__,L6__,A6__,I6__,O6__,j6__,M6__,P6__,U6__,F6__,R6__,q6__,B6__,H6__,V6__,W6__,z6__,$6__,K6__,Y6__,Q6__,X6__,G6__,J6__,Z6__,e7__,t7__,n7__,r7__,i7__,o7__,a7__,s7__,l7__,c7__,u7__,f7__,h7__,d7__,p7__,v7__,g7__,m7__,y7__,b7__,w7__,E7__,S7__,k7__,x7__,T7__,N7__,C7__,L7__,A7__,I7__,O7__,j7__,M7__,P7__,U7__,F7__,R7__,q7__,B7__,H7__,V7__,W7__,z7__,$7__,K7__,Y7__,Q7__,X7__,G7__,J7__,Z7__,e8__,t8__,n8__,r8__,i8__,o8__,a8__,s8__,l8__,c8__,u8__,f8__,h8__,d8__,p8__,v8__,g8__,m8__,y8__,b8__,w8__,E8__,S8__,k8__,x8__,T8__,N8__,C8__,L8__,A8__,I8__,O8__,j8__,M8__,P8__,U8__,F8__,R8__,q8__,B8__,H8__,V8__,W8__,z8__,$8__,K8__,Y8__,Q8__,X8__,G8__,J8__,Z8__,e9__,t9__,n9__,r9__,i9__,o9__,a9__,s9__,l9__,c9__,u9__,f9__,h9__,d9__,p9__,v9__,g9__,m9__,y9__,b9__,w9__,E9__,S9__,k9__,x9__,T9__,N9__,C9__,L9__,A9__,I9__,O9__,j9__,M9__,P9__,U9__,F9__,R9__,q9__,B9__,H9__,V9__,W9__,z9__,$9__,K9__,Y9__,Q9__,X9__,G9__,J9__,Z9__,e___,t___,n___,r___,i___,o___,a___,s___,l___,c___,u___,f___,h___,d___,p___,v___,g___,m___,y___,b___,w___,E___,S___,k___,x___,T___,N___,C___,L___,A___,I___,O___,j___,M___,P___,U___,F___,R___,q___,B___,H___,V___,W___,z___,$___,K___,Y___,Q___,X___,G___,J___,Z___,ea___,ta___,na___,ra___,ia___,oa___,aa___,sa___,la___,ca___,ua___,fa___,ha___,da___,pa___,va___,ga___,ma___,ya___,ba___,wa___,Ea___,Sa___,ka___,xa___,Ta___,Na___,Ca___,La___,Aa___,Ia___,Oa___,ja___,Ma___,Pa___,Ua___,Fa___,Ra___,qa___,Ba___,Ha___,Va___,Wa___,za___,$a___,Ka___,Ya___,Qa___,Xa___,Ga___,Ja___,Za___,eb___,tb___,nb___,rb___,ib___,ob___,ab___,sb___,lb___,cb___,ub___,fb___,hb___,db___,pb___,vb___,gb___,mb___,yb___,bb___,wb___,Eb___,Sb___,kb___,xb___,Tb___,Nb___,Cb___,Lb___,Ab___,Ib___,Ob___,jb___,Mb___,Pb___,Ub___,Fb___,Rb___,qb___,Bb___,Hb___,Vb___,Wb___,zb___,$b___,Kb___,Yb___,Qb___,Xb___,Gb___,Jb___,Zb___,ec___,tc___,nc___,rc___,ic___,oc___,ac___,sc___,lc___,cc___,uc___,fc___,hc___,dc___,pc___,vc___,gc___,mc___,yc___,bc___,wc___,Ec___,Sc___,kc___,xc___,Tc___,Nc___,Cc___,Lc___,Ac___,Ic___,Oc___,jc___,Mc___,Pc___,Uc___,Fc___,Rc___,qc___,Bc___,Hc___,Vc___,Wc___,zc___,$c___,Kc___,Yc___,Qc___,Xc___,Gc___,Jc___,Zc___,ed___,td___,nd___,rd___,id___,od___,ad___,sd___,ld___,cd___,ud___,fd___,hd___,dd___,pd___,vd___,gd___,md___,yd___,bd___,wd___,Ed___,Sd___,kd___,xd___,Td___,Nd___,Cd___,Ld___,Ad___,Id___,Od___,jd___,Md___,Pd___,Ud___,Fd___,Rd___,qd___,Bd___,Hd___,Vd___,Wd___,zd___,$d___,Kd___,Yd___,Qd___,Xd___,Gd___,Jd___,Zd___,ee___,te___,ne___,re___,ie___,oe___,ae___,se___,le___,ce___,ue___,fe___,he___,de___,pe___,ve___,ge___,me___,ye___,be___,we___,Ee___,Se___,ke___,xe___,Te___,Ne___,Ce___,Le___,Ae___,Ie___,Oe___,je___,Me___,Pe___,Ue___,Fe___,Re___,qe___,Be___,He___,Ve___,We___,ze___,$e___,Ke___,Ye___,Qe___,Xe___,Ge___,Je___,Ze___,ef___,tf___,nf___,rf___,ff___,of___,af___,sf___,lf___,cf___,uf___,ff___,hf___,df___,pf___,vf___,gf___,mf___,yf___,bf___,wf___,Ef___,Sf___,kf___,xf___,Tf___,Nf___,Cf___,Lf___,Af___,If___,Of___,jf___,Mf___,Pf___,Uf___,Ff___,Rf___,qf___,Bf___,Hf___,Vf___,Wf___,zf___,$f___,Kf___,Yf___,Qf___,Xf___,Gf___,Jf___,Zf___,eg___,tg___,ng___,rg

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\static\js\stt.js ===

function startSTT() {
    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
    recognition.lang = 'en-US';
    recognition.start();
    recognition.onresult = function(event) {
        const transcript = event.results[0][0].transcript;
        const responseText = document.getElementById('response_text');
        responseText.value = transcript;
        responseText.focus();
    };
    recognition.onerror = function(event) {
        console.error('Speech recognition error:', event.error);
    };
}

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\static\js\timer.js ===

document.addEventListener('DOMContentLoaded', function() {
    const progressBar = document.querySelector('.progress-bar');
    if (progressBar) {
        let progress = parseFloat(progressBar.style.width) || 0;
        const updateProgress = () => {
            if (progress < 100) {
                progress += 10;
                progressBar.style.width = `${progress}%`;
                progressBar.setAttribute('aria-label', `Progress: ${progress}%`);
            }
        };
        setInterval(updateProgress, 2000);
    }
});

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\templates\accessibility\settings.html ===

{% extends 'base.html' %}
{% load static %}

{% block content %}
<h2>Accessibility Settings</h2>
<form method="post" aria-labelledby="accessibility-settings">
    {% csrf_token %}
    <label for="dyslexia-font">
        <input type="checkbox" id="dyslexia-font" name="use_dyslexia_font" {% if accessibility_settings.use_dyslexia_font %}checked{% endif %}>
        Use Dyslexia-Friendly Font
    </label>
    <button type="submit">Save</button>
</form>
{% endblock %}

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\templates\assessments\assessment_detail.html ===

{% extends 'base.html' %}
{% block content %}
<h2>{{ assessment.title }}</h2>
{% if assessment.audio_file %}
  <audio controls><source src="{{ assessment.audio_file.url }}" type="audio/mpeg"></audio>
{% endif %}
<form method="post"> {% csrf_token %}
  <textarea id="response_text" name="response_text"></textarea>
  <button type="button" onclick="startSTT()">Record Response</button>
  <button type="submit">Submit</button>
</form>
<script src="{% static 'js/stt.js' %}"></script>
{% endblock %}

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\templates\assessments\assessment_list.html ===

{% extends 'base.html' %}
{% block content %}
<h2 id="assessment-list">Assessments</h2>
<ul aria-label="List of assessments">
{% for assessment in assessments %}
  <li><a href="{% url 'assessment_detail' assessment.pk %}" tabindex="0">{{ assessment.title }}</a></li>
{% endfor %}
</ul>
{% endblock %}

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\templates\assessments\assessment_result.html ===

{% extends 'base.html' %}
{% block content %}
<h2 id="assessment-results">Results for {{ assessment.title }}</h2>
<ul aria-label="Assessment responses">
{% for response in responses %}
  <li>{{ response.response_text }}</li>
{% endfor %}
</ul>
<a href="{% url 'assessment_list' %}" tabindex="0" aria-label="Back to assessments">Back to Assessments</a>
{% endblock %}

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\templates\assessments\audio_quiz.html ===

{% extends 'base.html' %}

{% block content %}
<h2>{{ assessment.title }} (Audio Quiz)</h2>
{% if assessment.audio_file %}
    <audio controls>
        <source src="{{ assessment.audio_file.url }}" type="audio/mpeg">
        Your browser does not support the audio element.
    </audio>
{% endif %}
<form method="post">
    {% csrf_token %}
    <textarea id="response_text" name="response_text"></textarea>
    <button type="button" onclick="startSTT()">Record Response</button>
    <button type="submit">Submit</button>
</form>
<script src="{% static 'js/stt.js' %}"></script>
{% endblock %}

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\templates\lessons\chunked.html ===

{% extends 'base.html' %}
{% block content %}
<h2>{{ lesson.title }} (Chunked View)</h2>
{% for chunk in chunks %}<p>{{ chunk }}</p>{% endfor %}
{% endblock %}

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\templates\lessons\lesson_detail.html ===

{% extends 'base.html' %}
{% load static %}

{% block content %}
<div class="lesson-container">

    <h2>{{ lesson.title }}</h2>

    {% if lesson.image %}
        <img src="{{ lesson.image.url }}" alt="Lesson Image" class="lesson-image" aria-label="Lesson illustration">
    {% endif %}

    {% if lesson.audio_file %}
        <audio controls aria-label="Lesson audio">
            <source src="{{ lesson.audio_file.url }}" type="audio/mpeg">
            Your browser does not support the audio element.
        </audio>
    {% endif %}

    <div class="lesson-content" aria-label="Lesson content">
        {% for chunk in chunks %}
            <p>{{ chunk }}</p>
        {% endfor %}
    </div>

    <div class="progress-container" role="progressbar"
         aria-valuenow="{{ progress.progress|default:0 }}"
         aria-valuemin="0"
         aria-valuemax="100">
        <div class="progress-bar"
             aria-label="Progress: {{ progress.progress|default:0 }}%"
             id="progress-bar-inner"></div>
    </div>

    <p><strong>Progress:</strong> {{ progress.progress|default:0 }}%</p>

    <div class="lesson-links">
        <a href="{% url 'lesson_download' lesson.pk %}" class="btn btn-download" aria-label="Download lesson content">
            📥 Download Lesson
        </a>

        {% if prev_lesson %}
            <a href="{% url 'lesson_detail' prev_lesson.pk %}" class="btn btn-prev previous-lesson" aria-label="Previous lesson">
                ⬅ Previous
            </a>
        {% endif %}
        {% if next_lesson %}
            <a href="{% url 'lesson_detail' next_lesson.pk %}" class="btn btn-next next-lesson" aria-label="Next lesson">
                Next ➡
            </a>
        {% endif %}
    </div>

</div>

<link rel="stylesheet" href="{% static 'css/progress.css' %}">
<script src="{% static 'js/stt.js' %}"></script>
<script src="{% static 'js/timer.js' %}"></script>
<script src="{% static 'js/gestures.js' %}"></script>
{% endblock %}

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\templates\lessons\lesson_list.html ===

{% extends 'base.html' %}
{% block content %}
<h2 id="lesson-list">Lessons</h2>
<ul aria-label="List of lessons">
{% for lesson in lessons %}
  <li><a href="{% url 'lesson_detail' lesson.pk %}" tabindex="0">{{ lesson.title }}</a></li>
{% endfor %}
</ul>
{% endblock %}

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\templates\paths\path_detail.html ===

{% extends 'base.html' %}

{% block content %}
<h2>{{ path.title }}</h2>
<ul>
    {% for lesson in path.lessons.all %}
        <li>{{ lesson.title }}</li>
    {% endfor %}
</ul>
<form method="post">
    {% csrf_token %}
    <label for="customized_order">Customize Order (e.g., lesson IDs):</label>
    <input type="text" id="customized_order" name="customized_order" value="{{ user_path.customized_order|default_if_none:'' }}">
    <button type="submit">Save Customization</button>
</form>
{% endblock %}

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\templates\paths\path_list.html ===

{% extends 'base.html' %}
{% block content %}
<h2 id="path-list">Learning Paths</h2>
<ul aria-label="List of learning paths">
{% for path in paths %}
  <li><a href="{% url 'path_detail' path.pk %}" tabindex="0">{{ path.title }}</a></li>
{% endfor %}
</ul>
{% endblock %}

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\templates\users\login.html ===

{% extends 'base.html' %}
{% block content %}
<h2>Login</h2>
<form method="post"> {% csrf_token %}
  <label for="username">Username:</label>
  <input type="text" id="username" name="username" required><br>
  <label for="password">Password:</label>
  <input type="password" id="password" name="password" required><br>
  <button type="submit">Login</button>
</form>
{% endblock %}

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\templates\users\profile.html ===

{% extends 'base.html' %}
{% block content %}
<h2>Welcome, {{ user.username }}!</h2>
<ul>
  <li><a href="/users/settings/">Settings</a></li>
  <li><a href="/lessons/">View Lessons</a></li>
  <li><a href="/paths/">Learning Paths</a></li>
</ul>
{% endblock %}

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\templates\users\register.html ===

{% extends 'base.html' %}
{% block content %}
<h2>Register</h2>
<form method="post"> {% csrf_token %}
  {{ form.as_p }}
  <button type="submit">Register</button>
</form>
{% endblock %}

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\templates\users\settings.html ===

{% extends 'base.html' %}
{% load static %}

{% block content %}
<h2 id="accessibility-settings">Accessibility Settings</h2>
<form method="post" aria-labelledby="accessibility-settings" role="form">
    {% csrf_token %}
    <label for="dyslexia-font">
        <input type="checkbox" id="dyslexia-font" name="use_dyslexia_font" {% if accessibility_settings.use_dyslexia_font %}checked{% endif %} tabindex="0">
        Use Dyslexia-Friendly Font
    </label>
    <button type="submit" tabindex="0">Save</button>
</form>
{% endblock %}

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\templates\base.html ===

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SmartLearnNeuro</title>
  <link rel="stylesheet" href="{% static 'css/style.css' %}">
  {% if accessibility_settings.use_dyslexia_font %}
  <link rel="stylesheet" href="{% static 'css/dyslexia.css' %}">
  {% endif %}
</head>
<body>
  {% include 'header.html' %}
  {% block content %}{% endblock %}
  {% include 'footer.html' %}
  <script src="{% static 'js/htmx.min.js' %}"></script>
</body>
</html>

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\templates\footer.html ===

<footer>
  © 2025 SmartLearnNeuro
</footer>

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\templates\header.html ===

<header>
    <nav aria-label="Main navigation">
        <a href="/">Home</a>
        <a href="/lessons/">Lessons</a>
        <a href="/assessments/">Assessments</a>
        <a href="/paths/">Paths</a>
        <a href="/accessibility/settings/">Accessibility</a>
        {% if user.is_authenticated %}
            <a href="{% url 'logout' %}">Logout</a>
        {% else %}
            <a href="{% url 'login' %}">Login</a>
        {% endif %}
    </nav>
</header>

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\users\migrations\0001_initial.py ===

# Generated by Django 5.2.1 on 2025-05-17 08:02

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("font_size", models.PositiveIntegerField(default=16)),
                ("prefers_audio", models.BooleanField(default=False)),
                ("prefers_chunked", models.BooleanField(default=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\users\migrations\__init__.py ===


=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\users\admin.py ===

from django.contrib import admin
from .models import CustomUser

# Register the CustomUser model to appear in the Django admin site
admin.site.register(CustomUser)

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\users\apps.py ===

from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\users\forms.py ===

from django import forms
from django.contrib.auth.forms import UserCreationForm
from .models import CustomUser

# This form extends Django's built-in UserCreationForm
# It allows new users to register with our CustomUser model
class CustomUserCreationForm(UserCreationForm):
    class Meta:
        model = CustomUser  # Use the custom user model instead of default
        fields = ('username', 'email', 'password1', 'password2')  # Fields to display on registration form


# This form is used for updating user preferences in settings (font size, audio, chunking)
class UserSettingsForm(forms.ModelForm):
    class Meta:
        model = CustomUser  # Again, our custom user model
        fields = ('font_size', 'prefers_audio', 'prefers_chunked')  # Settings related to accessibility and learning preference

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\users\models.py ===

from django.contrib.auth.models import AbstractUser
from django.db import models

# This is a custom user model that extends Django's default AbstractUser
# It adds fields specifically useful for accessibility and personalization
class CustomUser(AbstractUser):
    # Field to let users choose their preferred font size for better readability
    font_size = models.PositiveIntegerField(default=16)

    # Toggle for users who prefer audio-based content (e.g., TTS or audio lessons)
    prefers_audio = models.BooleanField(default=False)

    # Toggle for users who prefer their lessons to be shown in small chunks
    prefers_chunked = models.BooleanField(default=True)

    # String representation of the user model (used in admin interface and logs)
    def __str__(self):
        return self.username

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\users\serializers.py ===

from rest_framework import serializers
from .models import CustomUser

# This serializer is used to convert CustomUser model instances
# to JSON format and vice versa (for use with Django REST Framework)
class CustomUserSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomUser  # Specifies the model to serialize
        fields = (
            'id',              # Unique ID of the user
            'username',        # Username of the user
            'font_size',       # User's preferred font size for UI accessibility
            'prefers_audio',   # Boolean: whether the user prefers audio-based learning
            'prefers_chunked'  # Boolean: whether the user prefers chunked content
        )

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\users\tests.py ===

from django.test import TestCase
from django.urls import reverse
from .models import CustomUser

class CustomUserTests(TestCase):
    def setUp(self):
        self.user = CustomUser.objects.create_user(
            username='testuser', password='testpass', font_size=18, prefers_audio=True
        )

    def test_user_creation(self):
        self.assertEqual(self.user.username, 'testuser')
        self.assertEqual(self.user.font_size, 18)
        self.assertTrue(self.user.prefers_audio)

    def test_login_view(self):
        response = self.client.post(reverse('login'), {
            'username': 'testuser',
            'password': 'testpass'
        })
        self.assertEqual(response.status_code, 302)  # Redirect to profile

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\users\urls.py ===

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from . import views

router = DefaultRouter()
router.register(r'users', views.CustomUserViewSet)

urlpatterns = [
    path('login/', views.login_view, name='login'),
    path('register/', views.register_view, name='register'),
    path('profile/', views.profile_view, name='profile'),
    path('settings/', views.settings_view, name='settings'),
    path('logout/', views.logout_view, name='logout'),
    path('api/', include(router.urls)),
]

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\users\views.py ===

from django.shortcuts import render, redirect
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from rest_framework import viewsets, permissions
from .models import CustomUser
from .forms import CustomUserCreationForm, UserSettingsForm
from .serializers import CustomUserSerializer

def login_view(request):
    """
    Handle user login.
    """
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect('profile')
        messages.error(request, "Invalid username or password.")
    return render(request, 'users/login.html')

def register_view(request):
    """
    Handle user registration.
    """
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            messages.success(request, "Registration successful.")
            return redirect('profile')
        else:
            messages.error(request, "Please correct the errors below.")
    else:
        form = CustomUserCreationForm()
    return render(request, 'users/register.html', {'form': form})

@login_required
def profile_view(request):
    """
    Render the profile page for logged-in users.
    """
    return render(request, 'users/profile.html')

@login_required
def settings_view(request):
    """
    Allow users to update their settings/profile information.
    """
    if request.method == 'POST':
        form = UserSettingsForm(request.POST, instance=request.user)
        if form.is_valid():
            form.save()
            messages.success(request, "Settings updated successfully.")
            return redirect('profile')
        else:
            messages.error(request, "Please correct the errors below.")
    else:
        form = UserSettingsForm(instance=request.user)
    return render(request, 'users/settings.html', {'form': form})

@login_required
def logout_view(request):
    """
    Handle user logout.
    """
    logout(request)
    messages.success(request, "You have been logged out.")
    return redirect('login')

class CustomUserViewSet(viewsets.ModelViewSet):
    """
    API ViewSet for CustomUser model.
    Provides CRUD actions for CustomUser.
    """
    queryset = CustomUser.objects.all()
    serializer_class = CustomUserSerializer
    permission_classes = [permissions.IsAuthenticated]

=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\users\__init__.py ===


=== File: C:\Users\prana\OneDrive\Desktop\Smart learn\Smart-learn-Neuro\manage.py ===

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'SmartLearnNeuro.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
