
=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\accessibility\migrations\__init__.py ===


=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\accessibility\admin.py ===

from django.contrib import admin
from .models import AccessibilitySettings

# Register AccessibilitySettings model to Django admin
admin.site.register(AccessibilitySettings)

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\accessibility\apps.py ===

from django.apps import AppConfig


class AccessibilityConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accessibility'

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\accessibility\models.py ===

from django.db import models
from django.conf import settings

class AccessibilitySettings(models.Model):
    # One-to-one relation to the User model
    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    
    # Whether to use a dyslexia-friendly font
    use_dyslexia_font = models.BooleanField(default=False)

    def __str__(self):
        return f"Settings for {self.user.username}"

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\accessibility\tests.py ===

from django.test import TestCase

# Create your tests here.

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\accessibility\urls.py ===

from django.urls import path
from . import views

urlpatterns = [
    # URL route for accessibility settings page
    path('settings/', views.accessibility_settings, name='accessibility_settings'),
]

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\accessibility\views.py ===

from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from .models import AccessibilitySettings

@login_required
def accessibility_settings(request):
    # Get or create the AccessibilitySettings instance for the logged-in user
    settings, created = AccessibilitySettings.objects.get_or_create(user=request.user)
    
    if request.method == 'POST':
        # Update use_dyslexia_font based on form submission checkbox
        settings.use_dyslexia_font = 'use_dyslexia_font' in request.POST
        settings.save()
        # Redirect to user profile or any other page after saving
        return redirect('profile')
    
    # Render the settings form with current settings
    return render(request, 'accessibility/settings.html', {'settings': settings})

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\accessibility\__init__.py ===


=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\ai\gesture\models.py ===

from django.db import models

class Gesture(models.Model):
    user_id = models.IntegerField()
    gesture_type = models.CharField(max_length=100)
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Gesture {self.gesture_type} by user {self.user_id}"

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\ai\gesture\services.py ===

# Placeholder for gesture recognition (requires OpenCV/MediaPipe implementation)

def process_gesture(video_frame):
    return "placeholder_gesture"

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\ai\gesture\__init__.py ===


=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\ai\migrations\__init__.py ===


=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\ai\recommendation\models.py ===

from django.db import models

class Recommendation(models.Model):
    user_id = models.IntegerField()
    lesson_id = models.IntegerField()
    score = models.FloatField()

    def __str__(self):
        return f"Recommendation for user {self.user_id}"

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\ai\recommendation\recommendation.py ===

import tensorflow as tf
import numpy as np

def recommend_lessons(user_id, lesson_data):
    # Simplified recommendation logic
    return lesson_data[:3]  # Return top 3 lessons

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\ai\recommendation\__init__.py ===


=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\ai\summarization\utils.py ===

import spacy

nlp = spacy.load('en_core_web_sm')

def summarize_text(text):
    doc = nlp(text)
    sentences = [sent.text for sent in doc.sents]
    return ' '.join(sentences[:2])  # Simple summarization: first two sentences

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\ai\summarization\__init__.py ===


=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\ai\translation\adapters.py ===

import requests

def translate_text(text, target_lang='es'):
    # Placeholder for Google Translate API integration
    return f"Translated: {text}"

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\ai\translation\__init__.py ===


=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\ai\admin.py ===

from django.contrib import admin
from .recommendation.models import Recommendation

admin.site.register(Recommendation)

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\ai\apps.py ===

from django.apps import AppConfig


class AiConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'ai'

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\ai\models.py ===

from django.db import models

# Create your models here.

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\ai\tests.py ===

from django.test import TestCase

# Create your tests here.

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\ai\urls.py ===

from django.urls import path
from .views import RecommendationView

urlpatterns = [
    path('recommend/', RecommendationView.as_view(), name='recommend'),
]

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\ai\views.py ===

from django.shortcuts import render
from rest_framework.views import APIView
from rest_framework.response import Response
from .recommendation.recommendation import recommend_lessons

class RecommendationView(APIView):
    def get(self, request):
        user_id = request.user.id
        lessons = [{'id': 1, 'title': 'Lesson 1'}, {'id': 2, 'title': 'Lesson 2'}]
        recommended = recommend_lessons(user_id, lessons)
        return Response(recommended)

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\ai\__init__.py ===


=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\assessments\migrations\__init__.py ===


=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\assessments\admin.py ===

from django.contrib import admin
from .models import Assessment, Response

# Register Assessment and Response models with the Django admin site
admin.site.register(Assessment)
admin.site.register(Response)

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\assessments\apps.py ===

from django.apps import AppConfig


class AssessmentsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'assessments'

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\assessments\models.py ===

from django.db import models
from django.conf import settings

class Assessment(models.Model):
    """
    Model representing an assessment with an optional audio file.
    """
    title = models.CharField(max_length=200)
    audio_file = models.FileField(upload_to='audio/', null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

class Response(models.Model):
    """
    Model representing a user's response to an assessment.
    """
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    assessment = models.ForeignKey(Assessment, on_delete=models.CASCADE)
    response_text = models.TextField()

    def __str__(self):
        return f"{self.user.username} - {self.assessment.title}"

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\assessments\serializers.py ===

from rest_framework import serializers
from .models import Assessment, Response

class AssessmentSerializer(serializers.ModelSerializer):
    """
    Serializer for the Assessment model.
    Serializes the id, title, and audio_file fields.
    """
    class Meta:
        model = Assessment
        fields = ('id', 'title', 'audio_file')

class ResponseSerializer(serializers.ModelSerializer):
    """
    Serializer for the Response model.
    Serializes the id, user, assessment, and response_text fields.
    """
    class Meta:
        model = Response
        fields = ('id', 'user', 'assessment', 'response_text')

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\assessments\tests.py ===

from django.test import TestCase

# Create your tests here.

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\assessments\urls.py ===

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from . import views

# Router for REST API endpoints
router = DefaultRouter()
router.register(r'assessments', views.AssessmentViewSet)
router.register(r'responses', views.ResponseViewSet)

urlpatterns = [
    # URL for list of assessments
    path('', views.assessment_list, name='assessment_list'),

    # URL for assessment detail - corrected path converter syntax
    path('<int:pk>/', views.assessment_detail, name='assessment_detail'),

    # URL for assessment results
    path('<int:pk>/results/', views.assessment_results, name='assessment_results'),

    # Include API routes
    path('api/', include(router.urls)),
]

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\assessments\views.py ===

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from rest_framework import viewsets
from .models import Assessment, Response
from .serializers import AssessmentSerializer, ResponseSerializer

@login_required
def assessment_list(request):
    """
    View to display all assessments.
    """
    assessments = Assessment.objects.all()
    return render(request, 'assessments/assessment_list.html', {'assessments': assessments})

@login_required
def assessment_detail(request, pk):
    """
    View to display a single assessment and handle response submission.
    """
    assessment = get_object_or_404(Assessment, pk=pk)
    
    if request.method == 'POST':
        response_text = request.POST.get('response_text')
        # Create a new Response object linked to the current user and assessment
        Response.objects.create(user=request.user, assessment=assessment, response_text=response_text)
        return redirect('assessment_results', pk=assessment.pk)
    
    return render(request, 'assessments/assessment_detail.html', {'assessment': assessment})

@login_required
def assessment_results(request, pk):
    """
    View to display all responses by the current user for a specific assessment.
    """
    assessment = get_object_or_404(Assessment, pk=pk)
    responses = Response.objects.filter(user=request.user, assessment=assessment)
    return render(request, 'assessments/assessment_results.html', {'assessment': assessment, 'responses': responses})

class AssessmentViewSet(viewsets.ModelViewSet):
    """
    API endpoint for CRUD operations on assessments.
    """
    queryset = Assessment.objects.all()
    serializer_class = AssessmentSerializer

class ResponseViewSet(viewsets.ModelViewSet):
    """
    API endpoint for CRUD operations on responses.
    """
    queryset = Response.objects.all()
    serializer_class = ResponseSerializer

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\assessments\__init__.py ===


=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\core\admin.py ===

from django.contrib import admin

# Register your models here.

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\core\apps.py ===

from django.apps import AppConfig


class CoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core'

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\core\context_proccesors.py ===

from accessibility.models import AccessibilitySettings

def user_settings(request):
    if request.user.is_authenticated:
        settings, created = AccessibilitySettings.objects.get_or_create(user=request.user)
        return {'accessibility_settings': settings}
    return {'accessibility_settings': None}

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\core\models.py ===

from django.db import models

# Create your models here.

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\core\tests.py ===

from django.test import TestCase

# Create your tests here.

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\core\views.py ===

from django.shortcuts import render

# Create your views here.

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\core\__init__.py ===


=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\lessons\migrations\__init__.py ===


=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\lessons\admin.py ===

from django.contrib import admin
from .models import Lesson, LessonProgress

# Register the Lesson model with the Django admin site
admin.site.register(Lesson)

# Register the LessonProgress model with the Django admin site
admin.site.register(LessonProgress)

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\lessons\apps.py ===

from django.apps import AppConfig


class LessonsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'lessons'

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\lessons\models.py ===

from django.db import models
from django.conf import settings

class Lesson(models.Model):
    """
    Model representing a lesson with title, content, optional image, and creation timestamp.
    """
    title = models.CharField(max_length=200)
    content = models.TextField()
    image = models.ImageField(upload_to='images/', null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def get_chunks(self):
        """
        Return the content split by newline if user prefers chunked reading,
        else return the whole content as a single-item list.
        Note: 'settings.user.prefers_chunked' access is unusual; typically, this
        should be fetched from the user instance or user profile, not settings.
        """
        # Since 'settings.user.prefers_chunked' might not exist, you may want to
        # pass the user as a parameter to this method or handle this logic elsewhere.
        # Here's a safer default fallback:
        try:
            if settings.user.prefers_chunked:
                return self.content.split('\n')
        except AttributeError:
            pass
        return [self.content]

    def __str__(self):
        # String representation of a Lesson instance
        return self.title


class LessonProgress(models.Model):
    """
    Tracks progress of a user for a specific lesson.
    """
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE)
    progress = models.FloatField(default=0.0)  # Represents completion percentage (0.0 - 100.0)

    def __str__(self):
        # String representation showing username and lesson title
        return f"{self.user.username} - {self.lesson.title}"

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\lessons\serializers.py ===

from rest_framework import serializers
from .models import Lesson, LessonProgress

class LessonSerializer(serializers.ModelSerializer):
    """
    Serializer for the Lesson model.
    Serializes fields: id, title, content, and image.
    """
    class Meta:
        model = Lesson
        fields = ('id', 'title', 'content', 'image')

class LessonProgressSerializer(serializers.ModelSerializer):
    """
    Serializer for the LessonProgress model.
    Serializes fields: id, user, lesson, and progress.
    """
    class Meta:
        model = LessonProgress
        fields = ('id', 'user', 'lesson', 'progress')

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\lessons\tests.py ===

from django.test import TestCase

# Create your tests here.

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\lessons\urls.py ===

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from . import views

# Create a router for the DRF viewsets
router = DefaultRouter()
router.register(r'lessons', views.LessonViewSet)
router.register(r'progress', views.LessonProgressViewSet)

urlpatterns = [
    # List all lessons
    path('', views.lesson_list, name='lesson_list'),
    
    # Detail view for a lesson with primary key as integer
    path('<int:pk>/', views.lesson_detail, name='lesson_detail'),
    
    # Download lesson content as text file
    path('<int:pk>/download/', views.lesson_download, name='lesson_download'),
    
    # Include API routes generated by DRF router
    path('api/', include(router.urls)),
]

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\lessons\views.py ===

from django.shortcuts import render, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.http import HttpResponse
from rest_framework import viewsets
from .models import Lesson, LessonProgress
from .serializers import LessonSerializer, LessonProgressSerializer

@login_required
def lesson_list(request):
    """
    Display a list of all lessons.
    User must be logged in.
    """
    lessons = Lesson.objects.all()
    return render(request, 'lessons/lesson_list.html', {'lessons': lessons})

@login_required
def lesson_detail(request, pk):
    """
    Display details of a specific lesson.
    Retrieves or creates progress for the current user.
    Splits content into chunks if user prefers.
    """
    lesson = get_object_or_404(Lesson, pk=pk)
    progress, created = LessonProgress.objects.get_or_create(user=request.user, lesson=lesson)
    chunks = lesson.get_chunks()
    return render(request, 'lessons/lesson_detail.html', {
        'lesson': lesson,
        'progress': progress,
        'chunks': chunks,
    })

@login_required
def lesson_download(request, pk):
    """
    Provide lesson content as a downloadable text file.
    """
    lesson = get_object_or_404(Lesson, pk=pk)
    response = HttpResponse(lesson.content, content_type='text/plain')
    response['Content-Disposition'] = f'attachment; filename="{lesson.title}.txt"'
    return response

class LessonViewSet(viewsets.ModelViewSet):
    """
    API endpoint to view or edit lessons.
    """
    queryset = Lesson.objects.all()
    serializer_class = LessonSerializer

class LessonProgressViewSet(viewsets.ModelViewSet):
    """
    API endpoint to view or edit lesson progress.
    """
    queryset = LessonProgress.objects.all()
    serializer_class = LessonProgressSerializer

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\lessons\__init__.py ===


=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\paths\migrations\__init__.py ===


=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\paths\admin.py ===

from django.contrib import admin
from .models import LearningPath, UserPath

# Register models to appear in Django admin
admin.site.register(LearningPath)
admin.site.register(UserPath)

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\paths\apps.py ===

from django.apps import AppConfig


class PathsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'paths'

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\paths\models.py ===

from django.db import models
from django.conf import settings

class LearningPath(models.Model):
    title = models.CharField(max_length=200)
    lessons = models.ManyToManyField('lessons.Lesson')  # Many lessons can belong to one path
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

class UserPath(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    path = models.ForeignKey(LearningPath, on_delete=models.CASCADE)
    customized_order = models.JSONField(null=True, blank=True)  # Store custom lesson order as JSON

    def __str__(self):
        return f"{self.user.username} - {self.path.title}"

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\paths\serializers.py ===

from rest_framework import serializers
from .models import LearningPath, UserPath

class LearningPathSerializer(serializers.ModelSerializer):
    class Meta:
        model = LearningPath
        fields = ('id', 'title', 'lessons')  # Serialize these fields for LearningPath

class UserPathSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserPath
        fields = ('id', 'user', 'path', 'customized_order')  # Serialize these fields for UserPath

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\paths\tests.py ===

from django.test import TestCase

# Create your tests here.

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\paths\urls.py ===

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from . import views

router = DefaultRouter()
router.register(r'paths', views.LearningPathViewSet)
router.register(r'user_paths', views.UserPathViewSet)

urlpatterns = [
    path('', views.path_list, name='path_list'),
    path('<int:pk>/', views.path_detail, name='path_detail'),
    path('api/', include(router.urls)),
]

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\paths\views.py ===

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from rest_framework import viewsets
from .models import LearningPath, UserPath
from .serializers import LearningPathSerializer, UserPathSerializer

@login_required
def path_list(request):
    # Get all learning paths and user's customized paths
    paths = LearningPath.objects.all()
    user_paths = UserPath.objects.filter(user=request.user)
    return render(request, 'paths/path_list.html', {'paths': paths, 'user_paths': user_paths})

@login_required
def path_detail(request, pk):
    # Get the specific learning path or 404
    path = get_object_or_404(LearningPath, pk=pk)
    # Get or create user's customized path
    user_path, created = UserPath.objects.get_or_create(user=request.user, path=path)

    if request.method == 'POST':
        # Save customized lesson order submitted by user
        customized_order = request.POST.get('customized_order')
        user_path.customized_order = customized_order
        user_path.save()
        return redirect('path_list')

    return render(request, 'paths/path_detail.html', {'path': path, 'user_path': user_path})

class LearningPathViewSet(viewsets.ModelViewSet):
    queryset = LearningPath.objects.all()
    serializer_class = LearningPathSerializer

class UserPathViewSet(viewsets.ModelViewSet):
    queryset = UserPath.objects.all()
    serializer_class = UserPathSerializer

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\paths\__init__.py ===


=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\SmartLearnNeuro\asgi.py ===

"""
ASGI config for SmartLearnNeuro project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'SmartLearnNeuro.settings')

application = get_asgi_application()

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\SmartLearnNeuro\settings.py ===

# SmartLearnNeuro/settings.py

import os
from pathlib import Path

# BASE_DIR: The root directory of your project
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: Keep this secret in production
SECRET_KEY = 'django-insecure-(@j_id-m-tmubl(zf!5tw+0e1rrhukhm(^$+2fd0yp&9bgh2rd'

# SECURITY WARNING: Don't run with debug turned on in production
DEBUG = True

# Allow all hosts during development
ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    # Default Django apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',

    # Custom apps
    'users',
    'lessons',
    'assessments',
    'paths',
    'accessibility',
    'ai',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'SmartLearnNeuro.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'core' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.user_settings',  # Custom processor for accessibility
            ],
        },
    },
]

WSGI_APPLICATION = 'SmartLearnNeuro.wsgi.application'

# PostgreSQL Database configuration
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'smartlearnneuro_db',
        'USER': 'your_db_user',
        'PASSWORD': 'your_db_password',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

# Password validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files (user uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Use custom user model
AUTH_USER_MODEL = 'users.CustomUser'

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\SmartLearnNeuro\urls.py ===

# SmartLearnNeuro/urls.py

from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

# Define all the URL routes for the project
urlpatterns = [
    # Admin site URL
    path('admin/', admin.site.urls),

    # User authentication and profile management (login, register, settings)
    path('', include('users.urls')),

    # Lessons module (list, detail, progress)
    path('lessons/', include('lessons.urls')),

    # Assessments module (quizzes, audio assessments)
    path('assessments/', include('assessments.urls')),

    # Personalized learning paths
    path('paths/', include('paths.urls')),

    # Accessibility features (dyslexia font toggle, etc.)
    path('accessibility/', include('accessibility.urls')),

    # AI-based recommendations or tools
    path('ai/', include('ai.urls')),
]

# Serve media files (uploaded images, audio, etc.) during development
# In production, you should use a proper media server (like Amazon S3 or Nginx)
urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\SmartLearnNeuro\wsgi.py ===

"""
WSGI config for SmartLearnNeuro project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'SmartLearnNeuro.settings')

application = get_wsgi_application()

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\SmartLearnNeuro\__init__.py ===


=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\static\css\dyslexia.css ===

body {
  font-family: 'OpenDyslexic', Arial, sans-serif !important;
  background-color: #ffffe0;
  color: #000;
}

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\static\css\style.css ===

body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f9;
    color: #333;
    margin: 0;
    padding: 0;
}

header {
    background-color: #4CAF50;
    padding: 10px;
}

nav a {
    color: white;
    margin-right: 10px;
    text-decoration: none;
}

main {
    padding: 20px;
}

footer {
    background-color: #4CAF50;
    color: white;
    text-align: center;
    padding: 10px;
    position: fixed;
    bottom: 0;
    width: 100%;
}

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\static\js\gestures.js ===

// Placeholder for gesture recognition (requires WebSocket implementation)
console.log("Gesture JS loaded");

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\static\js\htmx.min.js ===

// Download from: https://unpkg.com/htmx.org@1.9.6/dist/htmx.min.js and place it here

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\static\js\stt.js ===

function startSTT() {
  const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
  recognition.lang = 'en-US';
  recognition.start();
  recognition.onresult = function(event) {
    const transcript = event.results[0][0].transcript;
    document.getElementById('response_text').value = transcript;
  };
}

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\static\js\timer.js ===

document.addEventListener('DOMContentLoaded', function() {
  const progressBar = document.querySelector('div[style*="background"]');
  if (progressBar) {
    let progress = parseFloat(progressBar.style.width) || 0;
    setInterval(() => {
      if (progress < 100) {
        progress += 10;
        progressBar.style.width = `${progress}%`;
      }
    }, 2000);
  }
});

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\templates\accessibilty\settings.html ===

{% extends 'base.html' %}

{% block content %}
<h2>Accessibility Settings</h2>
<form method="post">
    {% csrf_token %}
    <label>
        <input type="checkbox" name="use_dyslexia_font" {% if settings.use_dyslexia_font %}checked{% endif %}>
        Use Dyslexia-Friendly Font
    </label>
    <button type="submit">Save</button>
</form>
{% endblock %}

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\templates\assessments\assessment_detail.html ===

{% extends 'base.html' %}
{% block content %}
<h2>{{ assessment.title }}</h2>
{% if assessment.audio_file %}
  <audio controls><source src="{{ assessment.audio_file.url }}" type="audio/mpeg"></audio>
{% endif %}
<form method="post"> {% csrf_token %}
  <textarea id="response_text" name="response_text"></textarea>
  <button type="button" onclick="startSTT()">Record Response</button>
  <button type="submit">Submit</button>
</form>
<script src="{% static 'js/stt.js' %}"></script>
{% endblock %}

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\templates\assessments\assessment_list.html ===

{% extends 'base.html' %}
{% block content %}
<h2>Assessments</h2>
<ul>
{% for assessment in assessments %}
  <li>{{ assessment.title }}</li>
{% endfor %}
</ul>
{% endblock %}

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\templates\assessments\assessment_result.html ===

{% extends 'base.html' %}
{% block content %}
<h2>Results for {{ assessment.title }}</h2>
<ul>
{% for response in responses %}
  <li>{{ response.response_text }}</li>
{% endfor %}
</ul>
{% endblock %}

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\templates\assessments\audio_quiz.html ===

{% extends 'base.html' %}

{% block content %}
<h2>{{ assessment.title }} (Audio Quiz)</h2>
{% if assessment.audio_file %}
    <audio controls>
        <source src="{{ assessment.audio_file.url }}" type="audio/mpeg">
        Your browser does not support the audio element.
    </audio>
{% endif %}
<form method="post">
    {% csrf_token %}
    <textarea id="response_text" name="response_text"></textarea>
    <button type="button" onclick="startSTT()">Record Response</button>
    <button type="submit">Submit</button>
</form>
<script src="{% static 'js/stt.js' %}"></script>
{% endblock %}

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\templates\lessons\chunked.html ===

{% extends 'base.html' %}
{% block content %}
<h2>{{ lesson.title }} (Chunked View)</h2>
{% for chunk in chunks %}<p>{{ chunk }}</p>{% endfor %}
{% endblock %}

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\templates\lessons\lesson_detail.html ===

{% extends 'base.html' %}
{% block content %}
<h2>{{ lesson.title }}</h2>
{% if lesson.image %}<img src="{{ lesson.image.url }}" alt="Lesson Image">{% endif %}
{% for chunk in chunks %}<p>{{ chunk }}</p>{% endfor %}
<p>Progress: {{ progress.progress }}%</p>
<a href="#">Download Lesson</a>
<script src="{% static 'js/stt.js' %}"></script>
<script src="{% static 'js/timers.js' %}"></script>
{% endblock %}

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\templates\lessons\lesson_list.html ===

{% extends 'base.html' %}
{% block content %}
<h2>Lessons</h2>
<ul>
{% for lesson in lessons %}
  <li>{{ lesson.title }}</li>
{% endfor %}
</ul>
{% endblock %}

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\templates\paths\path_detail.html ===

{% extends 'base.html' %}

{% block content %}
<h2>{{ path.title }}</h2>
<ul>
    {% for lesson in path.lessons.all %}
        <li>{{ lesson.title }}</li>
    {% endfor %}
</ul>
<form method="post">
    {% csrf_token %}
    <label for="customized_order">Customize Order (e.g., lesson IDs):</label>
    <input type="text" id="customized_order" name="customized_order" value="{{ user_path.customized_order|default_if_none:'' }}">
    <button type="submit">Save Customization</button>
</form>
{% endblock %}

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\templates\paths\path_list.html ===

{% extends 'base.html' %}
{% block content %}
<h2>Learning Paths</h2>
<ul>
{% for path in paths %}
  <li>{{ path.title }}</li>
{% endfor %}
</ul>
{% endblock %}

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\templates\users\login.html ===

{% extends 'base.html' %}
{% block content %}
<h2>Login</h2>
<form method="post"> {% csrf_token %}
  <label for="username">Username:</label>
  <input type="text" id="username" name="username" required><br>
  <label for="password">Password:</label>
  <input type="password" id="password" name="password" required><br>
  <button type="submit">Login</button>
</form>
{% endblock %}

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\templates\users\profile.html ===

{% extends 'base.html' %}
{% block content %}
<h2>Welcome, {{ user.username }}!</h2>
<ul>
  <li><a href="/users/settings/">Settings</a></li>
  <li><a href="/lessons/">View Lessons</a></li>
  <li><a href="/paths/">Learning Paths</a></li>
</ul>
{% endblock %}

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\templates\users\register.html ===

{% extends 'base.html' %}
{% block content %}
<h2>Register</h2>
<form method="post"> {% csrf_token %}
  {{ form.as_p }}
  <button type="submit">Register</button>
</form>
{% endblock %}

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\templates\users\settings.html ===

{% extends 'base.html' %}
{% block content %}
<h2>Settings</h2>
<form method="post"> {% csrf_token %}
  {{ form.as_p }}
  <button type="submit">Save Settings</button>
</form>
<script src="{% static 'js/htmx.min.js' %}"></script>
{% endblock %}

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\templates\base.html ===

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SmartLearnNeuro</title>
  <link rel="stylesheet" href="{% static 'css/main.css' %}">
  {% if accessibility_settings.use_dyslexia_font %}
  <link rel="stylesheet" href="{% static 'css/dyslexia.css' %}">
  {% endif %}
</head>
<body>
  {% include 'header.html' %}
  {% block content %}{% endblock %}
  {% include 'footer.html' %}
  <script src="{% static 'js/htmx.min.js' %}"></script>
</body>
</html>

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\templates\footer.html ===

<footer>
  © 2025 SmartLearnNeuro
</footer>

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\templates\header.html ===

<header>
  <nav>
    <a href="/">Home</a>
    <a href="/lessons/">Lessons</a>
    <a href="/assessments/">Assessments</a>
    <a href="/paths/">Paths</a>
    <a href="/accessibility/settings/">Accessibility</a>
  </nav>
</header>

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\users\migrations\__init__.py ===


=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\users\admin.py ===

from django.contrib import admin
from .models import CustomUser

# Register the CustomUser model to appear in the Django admin site
admin.site.register(CustomUser)

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\users\apps.py ===

from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\users\forms.py ===

from django import forms
from django.contrib.auth.forms import UserCreationForm
from .models import CustomUser

# This form extends Django's built-in UserCreationForm
# It allows new users to register with our CustomUser model
class CustomUserCreationForm(UserCreationForm):
    class Meta:
        model = CustomUser  # Use the custom user model instead of default
        fields = ('username', 'email', 'password1', 'password2')  # Fields to display on registration form


# This form is used for updating user preferences in settings (font size, audio, chunking)
class UserSettingsForm(forms.ModelForm):
    class Meta:
        model = CustomUser  # Again, our custom user model
        fields = ('font_size', 'prefers_audio', 'prefers_chunked')  # Settings related to accessibility and learning preference

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\users\models.py ===

from django.contrib.auth.models import AbstractUser
from django.db import models

# This is a custom user model that extends Django's default AbstractUser
# It adds fields specifically useful for accessibility and personalization
class CustomUser(AbstractUser):
    # Field to let users choose their preferred font size for better readability
    font_size = models.PositiveIntegerField(default=16)

    # Toggle for users who prefer audio-based content (e.g., TTS or audio lessons)
    prefers_audio = models.BooleanField(default=False)

    # Toggle for users who prefer their lessons to be shown in small chunks
    prefers_chunked = models.BooleanField(default=True)

    # String representation of the user model (used in admin interface and logs)
    def __str__(self):
        return self.username

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\users\serializers.py ===

from rest_framework import serializers
from .models import CustomUser

# This serializer is used to convert CustomUser model instances
# to JSON format and vice versa (for use with Django REST Framework)
class CustomUserSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomUser  # Specifies the model to serialize
        fields = (
            'id',              # Unique ID of the user
            'username',        # Username of the user
            'font_size',       # User's preferred font size for UI accessibility
            'prefers_audio',   # Boolean: whether the user prefers audio-based learning
            'prefers_chunked'  # Boolean: whether the user prefers chunked content
        )

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\users\tests.py ===

from django.test import TestCase

# Create your tests here.

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\users\urls.py ===

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from . import views

# Create a DefaultRouter instance for DRF viewsets
router = DefaultRouter()
# Register the CustomUserViewSet with the router under the 'users' prefix
router.register(r'users', views.CustomUserViewSet)

urlpatterns = [
    # URL pattern for user login page/view
    path('login/', views.login_view, name='login'),
    # URL pattern for user registration page/view
    path('register/', views.register_view, name='register'),
    # URL pattern for user profile page/view (requires login)
    path('profile/', views.profile_view, name='profile'),
    # URL pattern for user settings page/view (requires login)
    path('settings/', views.settings_view, name='settings'),
    # Include the API routes generated by the DRF router (e.g., /api/users/)
    path('api/', include(router.urls)),
]

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\users\views.py ===

from django.shortcuts import render, redirect
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.urls import reverse_lazy
from rest_framework import viewsets, permissions
from .models import CustomUser
from .forms import CustomUserCreationForm, UserSettingsForm
from .serializers import CustomUserSerializer

def login_view(request):
    """
    Handle user login.
    """
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect('profile')
        messages.error(request, "Invalid username or password.")
    return render(request, 'users/login.html')

def register_view(request):
    """
    Handle user registration.
    """
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            messages.success(request, "Registration successful.")
            return redirect('profile')
        else:
            messages.error(request, "Please correct the errors below.")
    else:
        form = CustomUserCreationForm()
    return render(request, 'users/register.html', {'form': form})

@login_required
def profile_view(request):
    """
    Render the profile page for logged-in users.
    """
    return render(request, 'users/profile.html')

@login_required
def settings_view(request):
    """
    Allow users to update their settings/profile information.
    """
    if request.method == 'POST':
        form = UserSettingsForm(request.POST, instance=request.user)
        if form.is_valid():
            form.save()
            messages.success(request, "Settings updated successfully.")
            return redirect('profile')
        else:
            messages.error(request, "Please correct the errors below.")
    else:
        form = UserSettingsForm(instance=request.user)
    return render(request, 'users/settings.html', {'form': form})

class CustomUserViewSet(viewsets.ModelViewSet):
    """
    API ViewSet for CustomUser model.
    Provides CRUD actions for CustomUser.
    """
    queryset = CustomUser.objects.all()
    serializer_class = CustomUserSerializer
    permission_classes = [permissions.IsAuthenticated]  # Optional: restrict API to authenticated users

=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\users\__init__.py ===


=== File: C:\Users\abhis\OneDrive\Desktop\Smartlearn\Smart-learn-Neuro\manage.py ===

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'SmartLearnNeuro.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
